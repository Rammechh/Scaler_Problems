#KMP Algorithm (String matching Algo)

Make String Pallindrome
Problem Description

Given a string A of size N consisting only of lowercase alphabets. The only operation allowed is to insert characters in the beginning of the string.

Find and return how many minimum characters are needed to be inserted to make the string a palindrome string.



Problem Constraints
1 <= N <= 106



Input Format
The only argument given is a string A.



Output Format
Return an integer denoting the minimum characters that are needed to be inserted to make the string a palindrome string.



Example Input
Input 1:

 A = "abc"
Input 2:

 A = "bb"


Example Output
Output 1:

 2
Output 2:

 0


Example Explanation
Explanation 1:

 Insert 'b' at beginning, string becomes: "babc".
 Insert 'c' at beginning, string becomes: "cbabc".
Explanation 2:

 There is no need to insert any character at the beginning as the string is already a palindrome. 
_______________________________________________________________________Solution_____________________________________________________________________________
class Solution:
	# @param A : string
	# @return an integer
	def solve(self, A):
        # KMP Algo
        # To find the missing character (longest prefix which is also a suffix - palindrome)
        # given A $ A[::-1]
        n = len(A)
        A = list(A)
        A = A + ['$'] + A[::-1]
        
        #longest prefix suffix
        LPS = [0] * len(A)
        
        i = 0
        j = 1

        while i< len(A) and j< len(A):
            
            if A[i] == A[j]:
                i = i+1
                LPS[j] = i
                j += 1
            
            else:
                if i!=0:
                    i = LPS[i-1]
                else:
                    LPS[j] = 0
                    j += 1
            
        #print(LPS)              
        return(n-LPS[-1])
        
'''class Solution:
	# @param A : string
	# @return an integer
	def solve(self, A):
        # KMP Algo
        # To find the missing character (longest prefix which is also a suffix - palindrome)
        # given A $ A[::-1]
        n = len(A)
        A = list(A)
        A = A + ['$'] + A[::-1]
        
        #longest prefix suffix
        LPS = [0] * len(A)
        
        i = 0
        j = 1
        count = 1
        while i< len(A) and j< len(A):
            
            if A[i] == A[j]:
                LPS[j] = count
                i += 1
                j += 1
                count += 1
            else:
                count = 0
                while i>0 and A[j] != A[i]:
                    i = LPS[i-1]
                if A[i] == A[j]:
                    LPS[j] = LPS[i-1] + 1
                    i += 1
                    j += 1
                    count += 1
                else:
                    while A[i] != A[j]:
                        LPS[j] = 0
                        j += 1

        #print(LPS)              
        return(n-LPS[-1]-1)'''
_______________________________________________________________________Given_Solution_____________________________________________________________________________
class Solution:
    # @param A : string
    # @return an integer
    def create_lps(self, A):
        M = len(A)
        lps = [None] * M
        l = 0
        lps[0] = l
        i = 1
        while i < M:
            if A[i] == A[l]:
                l += 1
                lps[i] = l
                i += 1
            else:
                if l != 0:
                    l = lps[l - 1]
                else:
                    lps[i] = 0
                    i += 1
        return lps

    def solve(self, A):
        lps = self.create_lps(A + "$" + A[::-1])
        return len(A) - lps[-1]
_______________________________________________________________________Approach_____________________________________________________________________________
Each index of LPS array contains the longest prefix which is also a suffix. Now take the string and reverse of a string and combine them with a sentinal character in between them and compute the LPS array of this combined string. Now take the last value of the LPS array and subtract it with the length of the original string, This will give us the minimum number of insertions required in the begining of the string .