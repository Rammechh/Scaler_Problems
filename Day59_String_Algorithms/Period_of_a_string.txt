
Period of a string
Problem Description

Given a string A of length N consisting of lowercase alphabets. Find the period of the string.

Period of the string is the minimum value of k (k >= 1), that satisfies A[i] = A[i % k] for all valid i.



Problem Constraints
1 <= N <= 106



Input Format
First and only argument is a string A of length N.



Output Format
Return an integer, denoting the period of the string.



Example Input
Input 1:

 A = "abababab"
Input 2:

 A = "aaaa"


Example Output
Output 1:

 2
Output 2:

 1


Example Explanation
Explanation 1:

 Period of the string will be 2: 
 Since, for all i, A[i] = A[i%2]. 
Explanation 2:

 Period of the string will be 1.
_______________________________________________________________________Solution___________________________________________________________
import copy
class Solution:
    # @param A : string
    # @return an integer
    def solve(self, A):
        '''Max = 0
        Count = 0
        k = 1
        for i in range(len(A)):
            n = copy.deepcopy(i)
            while n  >= len(A) and A[n] == A[n%k]:
                Count += 1
                n += 1
                print(A[n])
                
            Max = max(Max, Count)
            k += 1
        print(Max)'''
        
        
        '''i = 0
        k = 1
        while k < len(A):
            i = 0
            while i< len(A) and A[i] == A[i%k]:
                i += 1
                if i == len(A):
                    return k
            k += 1
            
        if k >= len(A)//2 :
            return len(A)
        else:
            return k'''
 
        
        
        #Brute force of Z-algo
        '''
        z = [0] * len(A)
        z[0] = len(A)
        
        for i in range(1, len(A)):
            k = i
            j = 0
            cnt = 0
            while k < len(A) and A[k] == A[j]:
                cnt += 1
                k +=1 
                j += 1
            z[i] = cnt'''
            
        '-------------------------------------------------------'
        #Optimized z-algo
       
        n = len(A)
        z = [0] * len(A)
        z[0] = n
        
        def zAlgo(z):
            
            l, r, k = 0, 0, 0
            
            for i in range(1, n):
                # if i greater than right boundary then brute force
                if i>r:
                    l, r = i, i
                    
                    while r < n and A[r-l] == A[r]:
                        r += 1
                    z[i] = r-l
                    r -= 1
                    
                else:
                    # l-------rl---[i]---r
                    # then i can take i-l value if not more than r
                    # else make [i] = l and brute fore again
                    
                    k = i-l
                    
                    if i + z[k] < r:
                        z[i] = z[k]
                    
                    else:
                        l = i
                        while r< n and A[r-l] == A[r]:
                            r += 1
                        z[i] = r-l
                        r-=1

        zAlgo(z)
        
        for i in range(1, len(A)):
            if i + z[i] == len(A):
                return i
        return len(A)
            
_______________________________________________________________________Given_Solution___________________________________________________________
def getZarr(string):
    n = len(string)
    z = [0] * n
    # [L,R] make a window which matches
    # with prefix of s
    l, r, k = 0, 0, 0
    for i in range(1, n):

        # if i>R nothing matches so we will calculate.
        # Z[i] using naive way.
        if i > r:
            l, r = i, i

            # R-L = 0 in starting, so it will start
            # checking from 0'th index. For example,
            # for "ababab" and i = 1, the value of R
            # remains 0 and Z[i] becomes 0. For string
            # "aaaaaa" and i = 1, Z[i] and R become 5
            while r < n and string[r - l] == string[r]:
                r += 1
            z[i] = r - l
            r -= 1
        else:

            # k = i-L so k corresponds to number which
            # matches in [L,R] interval.
            k = i - l

            # if Z[k] is less than remaining interval
            # then Z[i] will be equal to Z[k].
            # For example, str = "ababab", i = 3, R = 5
            # and L = 2
            if z[k] < r - i + 1:
                z[i] = z[k]

            # For example str = "aaaaaa" and i = 2,
            # R is 5, L is 0
            else:

                # else start from R and check manually
                l = i
                while r < n and string[r - l] == string[r]:
                    r += 1
                z[i] = r - l
                r -= 1
    return z


class Solution:
    # @param A : string
    # @return an integer
    def solve(self, A):
        z = getZarr(A)
        n = len(A)
        for i in range(1, n):
            if i + z[i] == n:
                return i
        return n

--Java--
public class Solution {
    public int solve(String A) {
        ArrayList < Integer > Z = getZarr(A);
        int n = A.length();
        for (int i = 1; i < n; i++) {
            if (i + Z.get(i) == n) {
                return i;
            }
        }
        return n;
    }
    public ArrayList < Integer > getZarr(String str) {
        int n = str.length();
        // Z array
        ArrayList < Integer > Z = new ArrayList < Integer > ();
        for (int i = 0; i < n; i++) Z.add(0);
        int L, R, k;
        // [L,R] make a window which matches with prefix of s
        L = R = 0;
        for (int i = 1; i < n; ++i) {
            // if i>R nothing matches so we will calculate.
            // Z[i] using naive way.
            if (i > R) {
                L = R = i;
                // R-L = 0 in starting, so it will start
                // checking from 0'th index. For example,
                // for "ababab" and i = 1, the value of R
                // remains 0 and Z[i] becomes 0. For string
                // "aaaaaa" and i = 1, Z[i] and R become 5
                while (R < n && str.charAt(R - L) == str.charAt(R))
                    R++;
                Z.set(i, R - L);
                R--;
            } else {
                // k = i-L so k corresponds to number which
                // matches in [L,R] interval.
                k = i - L;
                // if Z[k] is less than remaining interval
                // then Z[i] will be equal to Z[k].
                // For example, str = "ababab", i = 3, R = 5
                // and L = 2
                if (Z.get(k) < R - i + 1)
                    Z.set(i, Z.get(k));
                // For example str = "aaaaaa" and i = 2, R is 5,
                // L is 0
                else {
                    // else start from R and check manually
                    L = i;
                    while (R < n && str.charAt(R - L) == str.charAt(R))
                        R++;
                    Z.set(i, R - L);
                    R--;
                }
            }
        }
        return Z;
    }
}
_______________________________________________________________________Approach___________________________________________________________
A simple approach is to check for all value of K from 1 to n-1, but this will take O(N2).

We can do this in linear time using pattern matching algorithm (Z algorithm).

First we will construct the Z array, i.e. for a string str[0..n-1], Z array is of same length as string. An element Z[i] of Z array stores length of the longest substring starting from str[i] which is also a prefix of str[0..n-1]. The first entry of Z array is meaning less as complete string is always prefix of itself.

This can be used, for any i (1 <= i < n), if i + Z[i] == N , then the period of the string is i.

If there is no such period, then N will be the period.