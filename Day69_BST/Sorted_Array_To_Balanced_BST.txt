Sorted Array To Balanced BST
Problem Description

Given an array where elements are sorted in ascending order, convert it to a height Balanced Binary Search Tree (BBST).

Balanced tree : a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.



Problem Constraints
1 <= length of array <= 100000



Input Format
First argument is an integer array A.



Output Format
Return a root node of the Binary Search Tree.



Example Input
Input 1:

 A : [1, 2, 3]
Input 2:

 A : [1, 2, 3, 5, 10]


Example Output
Output 1:

      2
    /   \
   1     3
Output 2:

      3
    /   \
   2     5
  /       \
 1         10


Example Explanation
Explanation 1:

 You need to return the root node of the Binary Tree.
 
_______________________________________________________________________Solution___________________________________________________________
# Definition for a  binary tree node
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    # @param A : tuple of integers
    # @return the root node in the tree
    def sortedArrayToBST(self, A):
        """if len(A) == 1:
            return TreeNode(A[0])
        mid = len(A) // 2
        ans = TreeNode(A[mid])
        def balanced(root, l, r, A):
            if l > r:
                return None
            elif l == r:
                return A[l]
            
            mid = (l + r) // 2
            root  = TreeNode(A[mid])
            root.left = balanced(root.left, l, mid, A)
            root.right = balanced(root.right, mid+1, r, A)
            
            return root
 
        
        return ans"""
            
        def balanced(l, r, A):
            
            if l <= r:
                mid = (l + r) // 2
                root  = TreeNode(A[mid])
                root.left = balanced(l, mid-1, A)
                root.right = balanced(mid+1, r, A)
            
                return root
            
        return balanced(0, len(A)-1, A)
_______________________________________________________________________Given_Solution___________________________________________________________
class Solution:
    # @param A : tuple of integers
    # @return the root node in the tree
    def sortedArrayToBST(self, A):
        mid = (len(A) - 1) / 2
        t = TreeNode(A[mid])
        if A[:mid]:
            t.left = self.sortedArrayToBST(A[:mid])
        if A[mid + 1 :]:
            t.right = self.sortedArrayToBST(A[mid + 1 :])
        return t
		
--Java--
/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public TreeNode sortedArrayToBST(final int[] A) {
        return helper(A, 0, A.length - 1);
    }

    private TreeNode helper(int[] nums, int l, int r) {
        if (l > r) {
            return null;
        }
        if (l == r) {
            return new TreeNode(nums[l]);
        }
        TreeNode node = new TreeNode(nums[(l + r) / 2]);
        node.left = helper(nums, l, (l + r) / 2 - 1);
        node.right = helper(nums, (l + r) / 2 + 1, r);
        return node;
    }
}
_______________________________________________________________________Approach___________________________________________________________
For a BST, all values lower than the root go in the left part of root, and all values higher go in the right part of the root.
For the tree to be balanced, we will need to make sure we distribute the elements almost equally in left and right part.
So we choose the mid part of the array as root and divide the elements around it .

Things to take care of :
1) Are you passing a copy of the array around or are you only passing around a reference ?
2) Are you dividing the array before passing onto the next function call or are you just specifying the start and end index ?