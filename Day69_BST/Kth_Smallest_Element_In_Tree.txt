Kth Smallest Element In Tree
Problem Description

Given a binary search tree represented by root A, write a function to find the Bth smallest element in the tree.



Problem Constraints
1 <= Number of nodes in binary tree <= 100000

0 <= node values <= 10^9



Input Format
First and only argument is head of the binary tree A.



Output Format
Return an integer, representing the Bth element.



Example Input
Input 1:

 
            2
          /   \
         1    3
B = 2
Input 2:

 
            3
           /
          2
         /
        1
B = 1



Example Output
Output 1:

 2
Output 2:

 1


Example Explanation
Explanation 1:

2nd element is 2.
Explanation 2:

1st element is 1.

_______________________________________________________________________Solution___________________________________________________________
# Definition for a  binary tree node
# class TreeNode:
#	def __init__(self, x):
#		self.val = x
#		self.left = None
#		self.right = None

class Solution:
	# @param A : root node of tree
	# @param B : integer
	# @return an integer

	"""def inOrder(self, root):
        if root == None:
            return 
        self.inOrder(root.left)
        self.k -= 1
        if self.k == 0:
            self.res =  root.val
            return
        self.inOrder(root.right)
        
	def kthsmallest(self, A, B):
	    self.k = B
	    self.res = None
        self.inOrder(A)
        return self.res"""
        
    # Iterative
    def kthsmallest(self, A, B):
        stack = []
        curr = A
        k = B
        while stack or curr:
            if curr:
                stack.append(curr)
                curr = curr.left
            else:
                curr = stack.pop()
                k -= 1
                if k == 0:
                    return curr.val
                
                curr = curr.right
        


_______________________________________________________________________Given_Solution___________________________________________________________
# Definition for a  binary tree node
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    # @param A : root node of tree
    # @param B : integer
    # @return an integer
    def kthsmallest(self, A, B):
        stack = []
        cur = A
        while stack or cur:
            if cur:
                stack.append(cur)
                cur = cur.left
            else:
                cur = stack.pop()
                B -= 1
                if B == 0:
                    return cur.val
                cur = cur.right
        return None

--Java--
/**
 * Definition for binary tree
 * class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode(int x) {
             * val = x;
             * left = null;
             * right = null;
             *
         }
         *
 }
 */
 public class Solution {
     static int k = 0;
     public int kthsmallest(TreeNode A, int B) {
         k = B;
         return find(A);
     }
     public static int find(TreeNode root) {
         if (root == null)
             return -1;
         // We do an inorder traversal here. 
         int k1 = find(root.left);
         if (k == 0)
             return k1; // left subtree has k or more elements.
         k--;
         if (k == 0)
             return root.val; // root is the kth element.
         return find(root.right); // answer lies in the right node.
     }
 }
_______________________________________________________________________Approach___________________________________________________________
Note the property of the binary search tree.
All elements smaller than root will be in the left subtree, and all elements greater than root will be in the right subtree.
This means we need not even explore the right subtree till we have explored everything in the left subtree. Or in other words, we go to the right subtree only when the size of left subtree + 1 ( root ) < k.

With that in mind, we can come up with an easy recursive solution which is similar to inorder traversal :

Step 1: Find the kth smallest element in left subtree decrementing k for every node visited. If answer is found, return answer.
Step 2: Decrement k by 1. If k == 0 ( this node is the kth node visited ), return nodeâ€™s value
Step 3: Find the kth smallest element in right subtree.