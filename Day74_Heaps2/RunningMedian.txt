Running Median
Problem Description

Given an array of integers A denoting a stream of integers. New arrays of integer B and C are formed. Each time an integer is encountered in a stream, append it at the end of B and append median of array B at the C.

Find and return the array C.

NOTE:

If the number of elements are N in B and N is odd then consider medain as B[N/2] ( B must be in sorted order).
If the number of elements are N in B and N is even then consider medain as B[N/2-1]. ( B must be in sorted order).


Problem Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 109



Input Format
The only argument given is the integer array A.



Output Format
Return an integer array C, C[i] denotes the median of first i elements.



Example Input
Input 1:

 A = [1, 2, 5, 4, 3]
Input 2:

 A = [5, 17, 100, 11]


Example Output
Output 1:

 [1, 1, 2, 2, 3]
Output 2:

 [5, 5, 17, 11]


Example Explanation
Explanation 1:

 stream          median
 [1]             1
 [1, 2]          1
 [1, 2, 5]       2
 [1, 2, 5, 4]    2
 [1, 2, 5, 4, 3] 3
Explanation 2:

 stream          median
 [5]              5
 [5, 17]          5
 [5, 17, 100]     17
 [5, 17, 100, 11] 11 
 
_______________________________________________________________________Solution___________________________________________________________
import heapq
class Solution:
    # @param A : list of integers
    # @return a list of integers
    def solve(self, A):
        
        l, r = [], []
        ans = []
        ans.append(A[0])
        heapq.heappush(l, -A[0])
        
        for i in range(1, len(A)):
            
            if len(l) and A[i] <= -l[0]:
                heapq.heappush(l, -A[i])
            else:
                heapq.heappush(r, A[i])
                
            while (len(l) < len(r)) or abs(len(l) - len(r)) > 1:
                if len(r) > len(l):
                    t = heapq.heappop(r)
                    heapq.heappush(l,-t)
                else:
                    t = heapq.heappop(l)
                    heapq.heappush(r,-t)
                    
            ans.append(-l[0])
        return ans
                
        
_______________________________________________________________________Given_Solution___________________________________________________________
# min heap in can be used as max heap by putting elements after multiplying  by minus.
# take care to multiply the elements by -1 after getting an element from the max queue.

import heapq

min_heap = []
max_heap = []


def add(a):

    global min_heap, max_heap

    x = 0

    if(len(max_heap)):
        x = -heapq.heappop(max_heap)
        heapq.heappush(max_heap, -x)

    if(len(max_heap) and a >= x):
        heapq.heappush(min_heap, a)
    else:
        heapq.heappush(max_heap, -a)

    if(abs(len(max_heap) - len(min_heap)) > 1):
        if(len(max_heap) > len(min_heap)):
            temp = heapq.heappop(max_heap)
            heapq.heappush(min_heap, -temp)

        else:
            temp = heapq.heappop(min_heap)
            heapq.heappush(max_heap, -temp)


def runningMedian(a):

    global min_heap, max_heap

    n = len(a)
    ans = []    # final answer

    # clear global variables
    min_heap = []
    max_heap = []

    for i in range(0, n):
        add(a[i])
        ans.append(get_median())

    return ans


def get_median():

    global min_heap, max_heap

    total = len(min_heap) + len(max_heap)

    ret = 0

    if(total % 2 == 1):
        if(len(max_heap) > len(min_heap)):
            ret = -heapq.heappop(max_heap)
            heapq.heappush(max_heap, -ret)
        else:
            ret = heapq.heappop(min_heap)
            heapq.heappush(min_heap, ret)
    else:
        ret = 1e9
        if(len(max_heap) != 0):
            x = -heapq.heappop(max_heap)
            heapq.heappush(max_heap, -x)
            ret = min(ret, x)

        if(len(min_heap) != 0):
            x = heapq.heappop(min_heap)
            heapq.heappush(min_heap, x)
            ret = min(ret, x)

    return ret


class Solution:
    # @param A : list of integers
    # @return a list of integers
    def solve(self, A):
        return runningMedian(A)

--Java-
public class Solution {
  static PriorityQueue < Integer > max_heap;
  static PriorityQueue < Integer > min_heap;
  public int[] solve(int[] A) {
    min_heap = new PriorityQueue();
    max_heap = new PriorityQueue(new CustomComp());
    int n = A.length;
    int[] ans = new int[n];
    for (int i = 0; i < n; ++i) {
      add(A[i]);
      ans[i] = get_median();
    }

    return ans;
  }
  public static int get_median() {
    int total = min_heap.size() + max_heap.size();
    int ret;
    if (total % 2 == 1) {
      if (max_heap.size() > min_heap.size())
        ret = max_heap.peek();
      else
        ret = min_heap.peek();
    } else {
      ret = Integer.MAX_VALUE;
      if (max_heap.size() != 0)
        ret = Math.min(ret, max_heap.peek());
      if (min_heap.size() != 0)
        ret = Math.min(ret, min_heap.peek());
    }
    return ret;
  }
  public static void add(int a) {
    if (max_heap.size() != 0 && (a >= max_heap.peek()))
      min_heap.offer(a);
    else
      max_heap.offer(a);

    if (Math.abs(max_heap.size() - min_heap.size()) > 1) {
      if (max_heap.size() > min_heap.size()) {
        int temp = max_heap.peek();
        max_heap.poll();
        min_heap.offer(temp);
      } else {
        int temp = min_heap.peek();
        min_heap.poll();
        max_heap.offer(temp);
      }
    }
  }

}
class CustomComp implements Comparator < Integer > {
  @Override
  public int compare(Integer a, Integer b) {
    return b - a;
  }
}
_______________________________________________________________________Approach___________________________________________________________
As it is mention in the hint, median is an element of the array such that half elements are smaller and half element are greater than that element.

So, the idea is to use max heap and min heap to store the elements of higher half and lower half.

Max heap and min heap can be implemented using STL.

Algorithm

Create two heaps. One max heap to maintain elements of lower half and one min heap to maintain elements of higher half at any point of time..
Take initial value of median as 0.
For every newly read element, insert it into either max heap or min heap and calculate the median based on the following conditions:

1 If the size of max heap is greater than size of min heap and the element is less than previous median then pop the top element from max heap and insert into min heap and insert the new element to max heap else insert the new element to min heap. Calculate the new median as average of top of elements of both max and min heap.

2 If the size of max heap is less than size of min heap and the element is greater than previous median then pop the top element from min heap and insert into max heap and insert the new element to min heap else insert the new element to max heap. Calculate the new median as average of top of elements of both max and min heap.

3 If the size of both heaps are same. Then check if current is less than previous median or not. If the current element is less than previous median then insert it to max heap and new median will be equal to top element of max heap. If the current element is greater than previous median then insert it to min heap and new median will be equal to top element of min heap.