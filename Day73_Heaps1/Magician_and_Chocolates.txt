Magician and Chocolates
Problem Description

Given N bags, each bag contains Bi chocolates. There is a kid and a magician. In one unit of time, kid chooses a random bag i, eats Bi chocolates, then the magician fills the ith bag with floor(Bi/2) chocolates.

Find the maximum number of chocolates that kid can eat in A units of time.

NOTE:

floor() function returns the largest integer less than or equal to a given number.
Return your answer modulo 109+7


Problem Constraints
1 <= N <= 100000
0 <= B[i] <= INT_MAX
0 <= A <= 105



Input Format
First argument is an integer A.
Second argument is an integer array B of size N.



Output Format
Return an integer denoting the maximum number of chocolates that kid can eat in A units of time.



Example Input
Input 1:

 A = 3
 B = [6, 5]
Input 2:

 A = 5
 b = [2, 4, 6, 8, 10]


Example Output
Output 1:

 14
Output 2:

 33


Example Explanation
Explanation 1:

 At t = 1 kid eats 6 chocolates from bag 0, and the bag gets filled by 3 chocolates. 
 At t = 2 kid eats 5 chocolates from bag 1, and the bag gets filled by 2 chocolates. 
 At t = 3 kid eats 3 chocolates from bag 0, and the bag gets filled by 1 chocolate. 
 so, total number of chocolates eaten are 6 + 5 + 3 = 14
Explanation 2:

 Maximum number of chocolates that can be eaten is 33.

_______________________________________________________________________Solution___________________________________________________________
import heapq
class Solution:
	# @param A : integer
	# @param B : list of integers
	# @return an integer
	
	#Brute Force
	#for each time find max val of A and add it to result also change the max value to floor(max/2)  
	
	"""def nchoc(self, A, B):
	    
	    # Cal power in logn time
	    def power(x, y):
	        temp = 0
	        if y == 0:
	            return 1
	        temp = power(x, y//2)
	        if y & 1 == 0:
	            return (temp * temp)
	        else:
	            return (x * temp * temp)
	            
	    # Solution
        i = 0
        ans = 0
        while i< A:
            m = max(B)
            ans += m
            ind = B.index(m)
            B[ind] = m//2
            i += 1
        return ans % (power(10,9) + 7)"""
        
    # Optimal Solution
    
    def nchoc(self, A, B):
        Mod  = (pow(10, 9) + 7)
        ans = 0
        h = []
        #heapify(h)
        for i in B:
            heapq.heappush(h, -i)

        for i in range(A):
            t = heapq.heappop(h)
            t = t * -1
            ans += t
            ans = ans % Mod
            heapq.heappush(h, -(t//2))
            
        return ans

_______________________________________________________________________Given_Solution___________________________________________________________

import heapq

class Solution:
	# @param A : integer
	# @param B : list of integers
	# @return an integer
	def nchoc(self, A, B):
            mod = 1000000007
            N = len(B)
            ans = 0
            pq = []
        
            for x in B:
                heapq.heappush(pq, -x)
    
            #Take maximum at each time, pop element from the queue
            while(A):
                max_elem = heapq.heappop(pq)
                # multiply by minus 1 as we have added numbers after multiplying by minus 1.        
                max_elem = -1 * max_elem
                #add the max_elem to answer 
                ans += max_elem
                ans = ans % mod
    
                # push the floor(A[i]/2) back to the queue.
                heapq.heappush(pq, -(max_elem // 2))
                A -= 1
            return ans
_______________________________________________________________________Approach___________________________________________________________

The solution to this problem can be found greedily.

At any time t, the kid will always choose the bag with the maximum number of chocolates and consume all it’s chocolates.
So we need to maintain the current maximum size among all bags for every time t = 1, … , B and also updating the sizes of the bags.

This can be done using a max heap : https://en.wikipedia.org/wiki/Min-max_heap