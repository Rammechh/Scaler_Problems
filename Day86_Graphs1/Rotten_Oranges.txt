
Rotten Oranges
Problem Description

Given a matrix of integers A of size N x M consisting of 0, 1 or 2.

Each cell can have three values:

The value 0 representing an empty cell.

The value 1 representing a fresh orange.

The value 2 representing a rotten orange.

Every minute, any fresh orange that is adjacent (Left, Right, Top, or Bottom) to a rotten orange becomes rotten. Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1 instead.

Note: Your solution will run on multiple test cases. If you are using global variables, make sure to clear them.



Problem Constraints
1 <= N, M <= 1000

0 <= A[i][j] <= 2



Input Format
The first argument given is the integer matrix A.



Output Format
Return the minimum number of minutes that must elapse until no cell has a fresh orange.

If this is impossible, return -1 instead.



Example Input
Input 1:

A = [   [2, 1, 1]
        [1, 1, 0]
        [0, 1, 1]   ]
Input 2:

 
A = [   [2, 1, 1]
        [0, 1, 1]
        [1, 0, 1]   ]


Example Output
Output 1:

 4
Output 2:

 -1


Example Explanation
Explanation 1:

 Max of 4 using (0,0) , (0,1) , (1,1) , (1,2) , (2,2)
Explanation 2:

 Task is impossible
_______________________________________________________________________Solution___________________________________________________________
from collections import deque
class Solution:
    # @param A : list of list of integers
    # @return an integer
    def solve(self, A):
        
        def rotten(i, j):
            if i<0 or j<0 or i>=len(A) or j>= len(A[0]) or A[i][j] != 1 or (i,j) in visited:
                return False
            A[i][j] = 2
            visited.add((i,j))
            return True
        
        q = deque()
        visited = set()
        
        for i in range(len(A)):
            for j in range(len(A[0])):
                if A[i][j] == 2:
                    q.append((i,j))
                    
        ans = 0
        while q:
            n = len(q)
            for k in range(n):
                i, j = q.popleft()
                
                if rotten(i, j-1):
                    q.append((i, j-1))
                
                if rotten(i, j+1):
                    q.append((i, j+1))
                
                if rotten(i-1, j):
                    q.append((i-1, j))
                
                if rotten(i+1, j):
                    q.append((i+1,  j))
            if q:
                ans += 1
        
        fullyRotten = True
        
        for i in range(len(A)):
            for j in range(len(A[0])):
                if A[i][j] == 1:
                    fullyRotten = False
                    break
                    
        if fullyRotten:
            return ans
        else:
            return -1
        
                
_______________________________________________________________________Given_Solution___________________________________________________________
from collections import deque
class Solution:
    # @param A : list of list of integers
    # @return an integer
    def solve(self, A):
        n = len(A)
        m = len(A[0])
        inf = 10000000000000
        dist = [[0 for j in range(m)] for i in range(n)]
        q = deque()
        li = [[-1, 0], [1, 0], [0, 1], [0, -1]]
        for i in range(n):
            for j in range(m):
                if(A[i][j] == 1 or A[i][j] == 0):
                    dist[i][j] = inf
                else:
                    q.append([i, j])
        while(len(q) != 0):
            x, y = q.popleft()
            for k in range(4):
                dx = x+li[k][0]
                dy = y+li[k][1]
                if(dx >= 0 and dy >= 0 and dx < n and dy < m and A[dx][dy] == 1 and dist[x][y] + 1 < dist[dx][dy]):
                    dist[dx][dy] = dist[x][y] + 1
                    q.append([dx, dy])
        ans = 0
        for i in range(n):
            for j in range(m):
                if(A[i][j] == 1):
                    ans = max(ans, dist[i][j])
        if(ans == inf):
            return -1
        return ans

--Java--
public class Solution {
    public int solve(int[][] grid) {
        Queue < int[] > queue = new LinkedList < > ();
        int fresh = 0;
        int time = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 2) {
                    queue.add(new int[] { i, j });
                } else if (grid[i][j] == 1) {
                    fresh++;
                }
            }
        }

        int[][] direction = {
            { 1, 0 },
            { 0, 1 },
            {-1, 0 },
            { 0, -1 } };
        while (!queue.isEmpty() && fresh > 0) {
            time++;
            int size = queue.size();
            while (size > 0) {
                int[] bad = queue.poll();
                for (int[] dir: direction) {
                    int nrow = bad[0] + dir[0];
                    int ncol = bad[1] + dir[1];

                    if (nrow < 0 || nrow >= grid.length || ncol < 0 || ncol >= grid[0].length || grid[nrow][ncol] == 2 || grid[nrow][ncol] == 0) {
                        continue;
                    }
                    grid[nrow][ncol] = 2;
                    fresh--;
                    queue.add(new int[] {
                        nrow,
                        ncol
                    });
                }
                size--;
            }
        }

        if (fresh == 0) {
            return time;
        } else
            return -1;
    }
}
_______________________________________________________________________Approach___________________________________________________________
Every turn, the rotting spreads from each rotting orange to other adjacent oranges.
Initially, the rotten oranges have ‘depth’ 0, and every time they rot a neighbor,
the neighbors have 1 more depth. We want to know the largest possible depth.

Use multi-source BFS to achieve this with all cells containing rotten oranges as starting nodes.
At the end check if there are fresh oranges left or not