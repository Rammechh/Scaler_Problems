Delete one
Problem Description

Given an integer array A of size N. You have to delete one element such that the GCD(Greatest common divisor) of the remaining array is maximum.

Find the maximum value of GCD.



Problem Constraints
2 <= N <= 105
1 <= A[i] <= 109



Input Format
First argument is an integer array A.



Output Format
Return an integer denoting the maximum value of GCD.



Example Input
Input 1:

 A = [12, 15, 18]
Input 2:

 A = [5, 15, 30]


Example Output
Output 1:

 6
Output 2:

 15


Example Explanation
Explanation 1:

 
 If you delete 12, gcd will be 3.
 If you delete 15, gcd will be 6.
 If you delete 18, gcd will 3.
 Maximum vallue of gcd is 6.
Explanation 2:

 If you delete 5, gcd will be 15.
 If you delete 15, gcd will be 5.
 If you delete 30, gcd will be 5.
 
________________________________________________________Solution____________________________________________________________

def gcd(a,b):
    if b == 0:
        return a
    return gcd(b, a%b)
class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        
        # Brute Force
        # Delete ele one by one and find the GCD of remaining
        
        """
        #ans[0]-> Max gcd value
        #ans[1] -> A[i] value deleted
        ans = [0, 0]
        for i in range(len(A)):
            if i == 0:
                g = A[1]
            else:
                g = A[0]
            for j in range(1,len(A)):
                if i != j:
                    g = gcd(g, A[j])
            if g > ans[0]:
                ans[0] = g
                ans[1] = A[i]
        
        return ans[0]
                    """
                    
        # Optimized create prefix and suffix GCD array
        n = len(A)
        
        #-------------------prefix GCD Array------------------------
        prefix = [0] * n
        prefix[0] = A[0]
        for i in range(1, len(A)):
            g = gcd(prefix[i-1], A[i])
            prefix[i] = g
            
        #-------------------suffix GCD Array------------------------
        suffix = [0] * n
        suffix[n-1] = A[n-1]
        
        for j in range(len(A)-2, -1, -1):
            g = gcd(suffix[j+1], A[j])
            suffix[j] = g
        #-------------get gcd of suffix[i+1] and prefix[i-1] so that the curr num is neglected.-------
        Max = 0

        for i in range(n):
            if i == 0:
                Max = max(Max,suffix[i+1])
            elif i == n-1:
                Max = max(prefix[i-1],Max)
            else:
                g = gcd(suffix[i+1], prefix[i-1])
                if g > Max:
                    Max = g
        
        return Max
________________________________________________________Given_Solution____________________________________________________________

import math
def gcd(x, y):
    while y:
        x, y = y, x % y
    return x
class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        n = len(A)
        pre = [0] * n
        back = [0] * n
        for i in range(n):
            if i == 0:
                pre[i] = A[i]
            else:
                pre[i] = gcd(A[i], pre[i - 1])
        for i in range(n - 1, -1, -1):
            if i == n - 1:
                back[i] = A[i]
            else:
                back[i] = gcd(A[i], back[i + 1])
        ans = -1
        for i in range(n):
            if i == 0:
                ans = max(ans, back[i + 1])
            elif i == n - 1:
                ans = max(ans, pre[i - 1])
            else:
                ans = max(ans, gcd(pre[i - 1], back[i + 1]))
        return ans