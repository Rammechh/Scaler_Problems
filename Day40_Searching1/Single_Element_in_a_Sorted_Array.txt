Single Element in a Sorted Array
Problem Description

Given a sorted array of integers A where every element appears twice except for one element which appears once, find and return this single element that appears only once.

NOTE: Users are expected to solve this in O(log(N)) time.



Problem Constraints
1 <= |A| <= 100000

1 <= A[i] <= 10^9



Input Format
The only argument given is the integer array A.



Output Format
Return the single element that appears only once.



Example Input
Input 1:

A = [1, 1, 7]
Input 2:

A = [2, 3, 3]


Example Output
Output 1:

 7
Output 2:

 2


Example Explanation
Explanation 1:

 7 appears once
Explanation 2:

 2 appears once
 
_______________________________________________________Solution___________________________________________________________________
 
class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        
        # Binary search
        low = 0
        high = len(A) - 1
    
        while (low <= high):
            # find first occurrence  
            mid = low + (high - low) // 2
            if A[mid] == A[mid -1] and mid > 0:
                mid -= 1
            
            if mid & 1 == 0:
                low = mid + 2
            
            else:
                high = mid - 1
                
        return A[high]
		
______________________________________________________Given_Solution___________________________________________________________________

class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        return self.bs(A, 0, len(A) - 1)

    def bs(self, A, left, right):
        mid = (right - left) / 2 + left
        # System.out.println(left+ " " + right);
        if (
            mid > 0
            and mid < (len(A) - 1)
            and ((A[mid - 1] != A[mid]) and (A[mid + 1] != A[mid]))
        ):
            # System.out.println(A.get(mid-1)+ " " + A.get(mid)+ " " +((A.get(mid-1)==A.get(mid)) ));
            # System.out.println(200==200);
            return A[mid]
        elif mid == (len(A) - 1) and A[mid - 1] != A[mid]:
            return A[mid]
        elif mid == 0 and A[mid + 1] != A[mid]:
            return A[mid]
        if A[mid + 1] == A[mid]:
            if (right + 1 - mid) % 2 == 0:
                right = mid - 1
            else:
                left = mid + 2
        elif A[mid - 1] == A[mid]:
            if (mid + 1 - left) % 2 == 0:
                left = mid + 1
            else:
                right = mid - 2
        return self.bs(A, left, right)