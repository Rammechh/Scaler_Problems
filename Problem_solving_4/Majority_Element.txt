Majority Element
-------------------
Problem Description

Given an array of size n, find the majority element. The majority element is the element that appears more than floor(n/2) times.
You may assume that the array is non-empty and the majority element always exist in the array.

Example :

Input : [2, 1, 2]
Return  : 2 which occurs 2 times which is greater than 3/2.

_______________________________________________________________________________________________________________________________________________________________________________________

My Solution:

class Solution:
	# @param A : tuple of integers
	# @return an integer
	def majorityElement(self, A):
	    
	    n = len(A)
	    maj = A[0]
	    cnt = 1
	    
        for i in range(1,n):
            if A[i] == maj:
                cnt += 1
            elif A[i] != maj and cnt != 0:
                cnt -= 1
            elif cnt == 0:
                maj = A[i]
        
        if A.count(maj) > n//2:
            return maj
        else:
            return -1
_______________________________________________________________________________________________________________________________________________________________________________________

Given Solution:

class Solution:
    # @param A : tuple of integers
    # @return an integer
    def majorityElement(self, A):
        '''intDict = dict()
        n = len(A)
        for a in A:
            intDict[a] = intDict.get(a,0) + 1
        for key in intDict:
            if intDict[key] > n/2:
                return key
        return -1'''
        '''n = len(A)
        if n == 1:
            return A[0]
        A = list(A)
        A.sort()
        return A[n/2]'''
        majority_idx = 0
        count = 1
        n = len(A)
        for i in range(1,n):
            if A[majority_idx] == A[i]:
                count += 1
            else:
                count -= 1
            if count == 0:
                majority_idx = i
                count = 1
        ret = A[majority_idx]
        count = 0
        for a in A:
            if a == ret:
                count += 1
        if count >= n/2:
            return ret
        return -1
_______________________________________________________________________________________________________________________________________________________________________________________

Other Given solutions:

In C:
---------

int majorityElement(const int* A, int n1) {
    
    int indx = 0, i, count = 1;
    
    for(i = 1; i < n1; i++)
    {
        if (A[indx] == A[i])
            count++;
        else
            count--;
        if (count == 0)
        {
            indx = i;
            count = 1;
        }
    }
    return A[indx];
}

In C++
--------
class Solution {
    public:
        int majorityElement(vector<int> &num) {
            int majorityIndex = 0;
            for (int count = 1, i = 1; i < num.size(); i++) {
                num[majorityIndex] == num[i] ? count++ : count--;
                if (count == 0) {
                    majorityIndex = i;
                    count = 1;
                }
            }

            return num[majorityIndex];
        }
};

In Java
---------
public class Solution {
	public int majorityElement(final List<Integer> A) {
	    
	    if (A == null)
	        return -1;
	        
	    int maj = A.get(0);
	    int count = 1;
	    int n = A.size();
	    
	    for (int i = 1; i < n; i++) {
	        if (A.get(i) == maj) {
	            count++;
	        } else if (count == 1) {
	            maj = A.get(i);
	        } else {
	            count--;
	        }
	    }
	    
	    count = 0;
	    
	    for (int i = 0; i < n; i++) {
	        if (A.get(i) == maj)
	            count++;
	    }
	    
	    if (count > n / 2)
	        return maj;
	        
	    return -1;
	    
	    
	}
}

_______________________________________________________________________________________________________________________________________________________________________________________