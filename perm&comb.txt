Permuatation:

def permute(self, A):
	    #return list(permutations(A))
	    
	    def dfs(nums, path, res):
	        if not nums:
	            res.append(path)
	        for i in range(len(nums)):
	            dfs(nums[:i]+nums[i+1:], path + [nums[i]], res)
	    
	    res = []
	    dfs(A, [], res)
	    return res

Combinations:
______________
def dfs(temp, idx):
    rslt.append(temp[:])
    for i in range(idx, len(nums)):
        temp.append(nums[i])
        dfs(temp,i+1)
        temp.pop()

rslt = []
nums  = [1,2,3]
dfs([], 0)
print(rslt)
_________________
def comb(nums, i, rslt):
    if i >= len(nums):
        ans.append(rslt)
        return

    comb(nums, i+1, rslt)
    comb(nums, i+1, rslt+str(nums[i]))
ans = []
comb([1,2,3], 0, "")
print(ans)
