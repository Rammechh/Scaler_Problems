
Swap List Nodes in pairs
Problem Description

Given a linked list A, swap every two adjacent nodes and return its head.

NOTE: Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.



Problem Constraints
1 <= |A| <= 106



Input Format
The first and the only argument of input contains a pointer to the head of the given linked list.



Output Format
Return a pointer to the head of the modified linked list.



Example Input
Input 1:

 A = 1 -> 2 -> 3 -> 4
Input 2:

 A = 7 -> 2 -> 1


Example Output
Output 1:

 2 -> 1 -> 4 -> 3
Output 2:

 2 -> 7 -> 1


Example Explanation
Explanation 1:

 In the first example (1, 2) and (3, 4) are the adjacent nodes. Swapping them will result in 2 -> 1 -> 4 -> 3
Explanation 2:

 In the second example, 3rd element i.e. 1 does not have an adjacent node, so it won't be swapped. 
_______________________________________________________________________Solution___________________________________________________________
# Definition for singly-linked list.
# class ListNode:
#	def __init__(self, x):
#		self.val = x
#		self.next = None

class Solution:
	# @param A : head node of linked list
	# @return the head node in the linked list
	def swapPairs(self, A):
        def swap(next1, next2):
            next1.next= next2.next
            next2.next = next1
            return next2
        
        start = ListNode(0)
        start.next = A
        
        curr = start
        
        while curr.next and curr.next.next:
            curr.next = swap(curr.next, curr.next.next)
            curr = curr.next.next
        
        return start.next
_______________________________________________________________________Given_Solution___________________________________________________________
# Definition for singly-linked list.
# class ListNode:
# 	def __init__(self, x):
# 		self.val = x
# 		self.next = None

class Solution:
    # @param A : head node of linked list
    # @return the head node in the linked list
    def swapPairs(self, A):
        start = ListNode("dummy")
        start.next = A
        current = start
        while current.next and current.next.next:
            current.next = self.swap(current.next, current.next.next)
            current = current.next.next
        return start.next

    def swap(self, node1, node2):
        node1.next = node2.next
        node2.next = node1
        return node2

--Java--
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode A) {
        if (A == null)
            return null;
        A = rec(A);
        return A;
    }

    public ListNode rec(ListNode node) {
        ListNode nextNode;
        ListNode firstNode = node;
        ListNode prevNode = null;
        if (node.next != null)
            firstNode = node.next;
        while (!(node == null || node.next == null)) {
            nextNode = node.next;
            node.next = nextNode.next;
            nextNode.next = node;
            if (prevNode != null)
                prevNode.next = nextNode;
            prevNode = node;
            node = node.next;
        }
        return firstNode;
    }
}
_______________________________________________________________________Approach___________________________________________________________

Lets first look at the problem of swapping 2 nodes.

Method 1: Just swap the values in the 2 nodes. In most cases, this wonâ€™t be a permissible solution.
Method 2: Move around the pointers.