Remove Duplicates from Sorted List
Problem Description

Given a sorted linked list, delete all duplicates such that each element appear only once.



Problem Constraints
0 <= length of linked list <= 106



Input Format
First argument is the head pointer of the linked list.



Output Format
Return the head pointer of the linked list after removing all duplicates.



Example Input
Input 1:

 1->1->2
Input 2:

 1->1->2->3->3


Example Output
Output 1:

 1->2
Output 2:

 1->2->3


Example Explanation
Explanation 1:

 Each element appear only once in 1->2.

_______________________________________________________________________Solution___________________________________________________________
# Definition for singly-linked list.
# class ListNode:
#	def __init__(self, x):
#		self.val = x
#		self.next = None

class Solution:
	# @param A : head node of linked list
	# @return the head node in the linked list
	def deleteDuplicates(self, A):
        
        '''curr = A
        while curr and curr.next:
            x = curr
            while x and x.val == curr.val:
                x = x.next
            curr.next = x
            curr = curr.next
        
        return A'''
        
        head = A
        
        while A:
            while A.next and A.next.val == A.val:
                A.next = A.next.next
            A = A.next
            
        return head
_______________________________________________________________________Given_Solution___________________________________________________________
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # @param A : head node of linked list
    # @return the head node in the linked list
    def deleteDuplicates(self, A):
        head = A
        while A:
            while A.next and A.next.val == A.val:
                A.next = A.next.next
            A = A.next
        return head
		
--Java--
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode deleteDuplicates(ListNode A) {
        if (A == null)
            return A;
        ListNode next;
        ListNode prevNode;
        int prev = A.val;
        next = A.next;
        prevNode = A;
        while (next != null) {
            if (next.val == prev) {
                prevNode.next = next.next;
            } else {
                prevNode = next;
                prev = next.val;
            }
            next = next.next;
        }
        return A;
    }
}
_______________________________________________________________________Approach___________________________________________________________
Skip the node where head->next != NULL && head->val == head->next->val.

Make sure you take care of corner cases :
1) Do you handle repetitions at the end ? ex : 1 -> 1
2) Do you handle cases where there is just one element ? ex : 1
3) Do you handle cases where there is just one element repeated numerous times ? 1->1->1->1->1->1