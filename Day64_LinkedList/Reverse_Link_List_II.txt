
Reverse Link List II
Problem Description

Reverse a linked list A from position B to C.

NOTE: Do it in-place and in one-pass.



Problem Constraints
1 <= |A| <= 106

1 <= B <= C <= |A|



Input Format
The first argument contains a pointer to the head of the given linked list, A.

The second arugment contains an integer, B.

The third argument contains an integer C.



Output Format
Return a pointer to the head of the modified linked list.



Example Input
Input 1:

 A = 1 -> 2 -> 3 -> 4 -> 5
 B = 2
 C = 4

Input 2:

 A = 1 -> 2 -> 3 -> 4 -> 5
 B = 1
 C = 5


Example Output
Output 1:

 1 -> 4 -> 3 -> 2 -> 5
Output 2:

 5 -> 4 -> 3 -> 2 -> 1


Example Explanation
Explanation 1:

 In the first example, we want to reverse the highlighted part of the given linked list : 1 -> 2 -> 3 -> 4 -> 5 
 Thus, the output is 1 -> 4 -> 3 -> 2 -> 5 
Explanation 2:

 In the second example, we want to reverse the highlighted part of the given linked list : 1 -> 4 -> 3 -> 2 -> 5  
 Thus, the output is 5 -> 4 -> 3 -> 2 -> 1 
_______________________________________________________________________Solution___________________________________________________________
# Definition for singly-linked list.
# class ListNode:
#	def __init__(self, x):
#		self.val = x
#		self.next = None

class Solution:
	# @param A : head node of linked list
	# @param B : integer
	# @param C : integer
	# @return the head node in the linked list
	def reverseBetween(self, A, B, C):
	    
	    if A.next == None:
	        return A
	    elif B == C:
	        return A
	    
	    def reverse(From):
            d = None
	        c = From
	        while c:
	            nxt = c.next
	            c.next = d
	            d = c
	            c = nxt
	        
	        
	    head = curr = A
	    Count = 0
	    first = None
	    to = None
	    last = None
	    From = None
	    while curr:
	        Count += 1
	        if Count < B:
	            first = curr
	        elif Count == B:
	            From = curr
	        elif Count == C:
	            to = curr
	            last = to.next
	            to.next = None
	            break
	        curr = curr.next

	    reverse(From)
	    
	    if first:
	        first.next = to
        else:
            head = to
        
        From.next = last
        
	    return head
	          
_______________________________________________________________________Given_Solution___________________________________________________________
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None


class Solution:
    # @param A : head node of linked list
    # @param B : integer
    # @param C : integer
    # @return the head node in the linked list
    def reverseBetween(self, A, B, C):
        head = A
        if head == None or head.next == None:
            return head
        dummy = ListNode(0)
        dummy.next = head
        head1 = dummy
        for i in range(B - 1):
            head1 = head1.next
        p = head1.next
        for i in range(C - B):
            tmp = head1.next
            head1.next = p.next
            p.next = p.next.next
            head1.next.next = tmp
        return dummy.next

#Explanation from the video

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

def reverse(node):
    bef = None
    aft = None
    while node:
        aft = node.next
        node.next = bef
        bef = node
        node = aft

class Solution:
    # @param A : head node of linked list
    # @param B : integer
    # @param C : integer
    # @return the head node in the linked list
    def reverseBetween(self, A, B, C):
        current = A
        first = None
        fromx = None
        to = None
        last = None
        count = 0
        while current!= None:
            count += 1
            if count < B:
                first = current
            if count == B:
                fromx = current
            if count == C:
                to = current
                last = to.next
                break
            current = current.next
        to.next = None
        #reverse from to to
        reverse(fromx)
        if first != None:
            first.next = to
        else:
            A = to
        fromx.next = last
        return A

--Java--
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode reverseBetween(ListNode A, int m, int n) {
        int i;
        ListNode node = A;
        ListNode prev = null;
        m--;
        n--;
        for (i = 0; i < m; i++) {
            prev = node;
            node = node.next;
        }
        if (prev != null)
            prev.next = reverseList(node, n - m + 1);
        else
            A = reverseList(node, n - m + 1);
        return A;
    }

    public ListNode reverseList(ListNode A, int count) {
        ListNode node, prev, temp, last;
        node = A;
        last = A;
        if (node == null)
            return null;
        prev = null;
        while (node != null && count > 0) {
            temp = node.next;
            node.next = prev;
            prev = node;
            node = temp;
            count--;
        }
        last.next = node;
        return prev;
    }
}
_______________________________________________________________________Approach___________________________________________________________
If you are still stuck at reversing the full linked list problem,
then would maintaining curNode, nextNode and a tmpNode help ?

Maybe at every step, you do something like this :

    tmp = nextNode->next;
            nextNode->next = cur;
            cur = nextNode;
            nextNode = tmp;
Now, lets say you did solve the problem of reversing the linked list and are stuck at applying it to current problem.
What if your function reverses the linked list and returns the endNode of the list.
You can simply do
prevNodeOfFirstNode->next = everseLinkedList(curNode, n - m + 1);

Explanation in the video:
We can also find the two pointers between which the list needs to be reversed and only reverse that portion.
We will also have to make two new connections, one from the node just before the first node in the original portion to the node at the starting of the reversed portion.
Another from the first node of the original portion to the node after the last node in the original portion.
Detailed explanation is in the video.