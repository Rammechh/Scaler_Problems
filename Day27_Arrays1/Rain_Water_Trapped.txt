Rain Water Trapped
Problem Description

Given a vector A of non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.



Problem Constraints
1 <= |A| <= 100000



Input Format
First and only argument is the vector A



Output Format
Return one integer, the answer to the question



Example Input
Input 1:

A = [0, 1, 0, 2]
Input 2:

A = [1, 2]


Example Output
Output 1:

1
Output 2:

0


Example Explanation
Explanation 1:

1 unit is trapped on top of the 3rd element.
Explanation 2:

No water is trapped.


--------------------------------------------------------------------Solution-------------------------------------------------------------
class Solution:
	# @param A : tuple of integers
	# @return an integer
	def trap(self, A):
        leftMax = []
        rightMax = [0] * len(A)
        
        # Calculating left Max
        Max = -999999999
        for num in A:
            if num > Max:
                Max = num
                leftMax.append(Max)
            else:
                leftMax.append(Max)
        
        #Calculating right Max
        Max = -999999999
        for i in range(len(A)-1, -1, -1):
            if A[i] > Max:
                Max = A[i]
                rightMax[i] = Max
            else:
                rightMax[i] = Max
        
        #Calculate amount of water stored on each building
        #Take leftMax and rightMax and go with the min of two, since it overflows after that
        #subtract the building height from that to get the amount of water stored on top of that building
        Sum = 0
        for i in range(1, len(A)-1):
            if (min(leftMax[i-1], rightMax[i+1]) - A[i]) > 0: 
                Sum += min(leftMax[i-1], rightMax[i+1]) -A[i]
            
        return Sum
		
__________________________________________________________Given Solution__________________________________________________________________
class Solution:
    # @param A : tuple of integers
    # @return an integer
    def trap(self, A):
        stack = []
        curr = 0
        n = len(A)
        if n == 0:
            return 0
        while curr < n and A[curr] == 0:
            curr += 1
        retVol = 0
        while curr < n:
            while len(stack) != 0 and A[curr] >= A[stack[-1]]:
                bar = stack.pop()
                if (len(stack) == 0):
                    break
                retVol += (curr - stack[-1] - 1)*(min(A[curr], A[stack[-1]])-A[bar])
            stack.append(curr)
            curr += 1
        return retVol