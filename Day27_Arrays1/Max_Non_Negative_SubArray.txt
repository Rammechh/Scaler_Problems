Max Non Negative SubArray
Given an array of integers, A of length N, find out the maximum sum sub-array of non negative numbers from A.

The sub-array should be contiguous i.e., a sub-array created by choosing the second and fourth element and skipping the third element is invalid.

Maximum sub-array is defined in terms of the sum of the elements in the sub-array.

Find and return the required subarray.

NOTE:

    1. If there is a tie, then compare with segment's length and return segment which has maximum length.
    2. If there is still a tie, then return the segment with minimum starting index.


Input Format:

The first and the only argument of input contains an integer array A, of length N.
Output Format:

Return an array of integers, that is a subarray of A that satisfies the given conditions.
Constraints:

1 <= N <= 1e5
-INT_MAX < A[i] <= INT_MAX
Examples:

Input 1:
    A = [1, 2, 5, -7, 2, 3]

Output 1:
    [1, 2, 5]

Explanation 1:
    The two sub-arrays are [1, 2, 5] [2, 3].
    The answer is [1, 2, 5] as its sum is larger than [2, 3].

Input 2:
    A = [10, -1, 2, 3, -4, 100]

Output 2:
    [100]

Explanation 2:
    The three sub-arrays are [10], [2, 3], [100].
    The answer is [100] as its sum is larger than the other two.

________________________________________________________________Solution__________________________________________________________________

class Solution:
    # @param A : list of integers
    # @return a list of integers
    def maxset(self, A):
        Sum = 0
        Max = 0
        s = 0
        cnt = 0
        if max(A) <= 0:
            zero = []
            for i in range(len(A)):
                if A[i] == 0:
                    cnt += 1
                    zero.append(cnt)
                else:
                    cnt = 0
            if len(zero) == 0:
                return []
            return [0]* max(zero)
            
        for i in range(len(A)):
            if A[i] < 0:
                Sum = 0
                s = i+1
            else:
                Sum += A[i]
                
            if Sum > Max:
                Max = Sum
                start = s
                end = i
                
        return A[start : end+1] 

________________________________________________________________Given_Solution__________________________________________________________________
class Solution:
    # @param A : list of integers
    # @return a list of integers
    def maxset(self, A):
        max_ending_here = 0
        start_ending_here = 0
        end_ending_here = 0
        max_so_far = 0
        start_so_far = 0
        end_so_far = 0
        
        allNegative = True
        n = len(A)
        if n == 0:
            return []
        for i in range(n):
            if A[i] >= 0:
                allNegative = False
            if max_ending_here + A[i] >= max_ending_here:
                max_ending_here += A[i]
                end_ending_here = i
            else:
                if max_so_far < max_ending_here:
                    max_so_far = max_ending_here
                    start_so_far = start_ending_here
                    end_so_far = end_ending_here
                elif max_so_far <= max_ending_here:
                    if end_ending_here - start_ending_here > end_so_far - start_so_far:
                        max_so_far = max_ending_here
                        start_so_far = start_ending_here
                        end_so_far = end_ending_here
                max_ending_here = 0
                start_ending_here = i+1
                end_ending_here = 0
        
        if max_so_far < max_ending_here:
            max_so_far = max_ending_here
            start_so_far = start_ending_here
            end_so_far = end_ending_here
        elif max_so_far <= max_ending_here:
            if end_ending_here - start_ending_here > end_so_far - start_so_far:
                max_so_far = max_ending_here
                start_so_far = start_ending_here
                end_so_far = end_ending_here
        if allNegative:
            return []
        else:
            return A[start_so_far:end_so_far+1]