Inversion count in an array
Problem Description
Given an array of integers A. If i < j and A[i] > A[j] then the pair (i, j) is called an inversion of A. Find the total number of inversions of A modulo (109 + 7).



Problem Constraints
1 <= length of the array <= 100000

1 <= A[i] <= 10^9



Input Format
The only argument given is the integer array A.



Output Format
Return the number of inversions of A modulo (109 + 7).



Example Input
Input 1:

A = [3, 2, 1]
Input 2:

A = [1, 2, 3]


Example Output
Output 1:

3
Output 2:

0


Example Explanation
Explanation 1:

 All pairs are inversions.
Explanation 2:

 No inversions.
 
_______________________________________________________________________Solution___________________________________________________________

class Solution:
    # @param A : list of integers
    # @return an integer
    Count = 0
    def split(self, A):
        if len(A) <= 1:
            return A
        mid  = len(A) // 2
        left = self.split(A[:mid])
        right = self.split(A[mid:])
        return self.merge(left, right)
        
    def merge(self, left, right):
        res = []
        i, j = 0, 0
        while i< len(left) and j < len(right):
            if left[i] > right[j]:
                self.Count += len(left) - i
                res.append(right[j])
                j += 1
            else:
                res.append(left[i])
                i += 1
        while i<len(left):
            res.append(left[i])
            i+=1
        while j< len(right):
            res.append(right[j])
            j+=1
        return res
        
    def solve(self, A):
        self.split(A)
        return self.Count % ((10 **9) + 7)
		
		
		# Try
		
        """n = len(A)
        inv_count = 0
        for i in range(n):
            for j in range(i + 1, n):
                if (A[i] > A[j]):
                    inv_count += 1
 
        return inv_count"""
        """def countSmaller(sel):
	        count = [0 for i in nums]
	        arr = [(nums[i], i) for i in range(len(nums))]
	        result = [[] for i in nums]

	    def merge(left, mid, right):
		    i, j, index = left, mid, 0
		    while i < mid or j < right:
			    if i == mid or (j < right and arr[j][0] < arr[i][0]):
				    result[index] = arr[j]
				    j += 1
			    else:
				    result[index] = arr[i]
				    count[arr[i][1]] += j - mid
				    i += 1
			    index += 1
		    arr[left:right] = result[:index]

	    # regular mergesort
	    def merge_sort(left, right):
		    mid = left + (right - left) // 2
		    if mid - left:
			    merge_sort(left, mid)
			    merge_sort(mid, right)
			    merge(left, mid, right)
        arr = A
	    merge_sort(0, len(arr))
	    return count"""
_______________________________________________________________________Given_Solution___________________________________________________________
# Python 3 program to count inversions in an array 
  
# Function to Use Inversion Count 
def mergeSort(arr, n):
    # A temp_arr is created to store
    # sorted array in merge function
    temp_arr = [0] * n
    return _mergeSort(arr, temp_arr, 0, n - 1)
  
# This Function will use MergeSort to count inversions
def _mergeSort(arr, temp_arr, left, right):
    # A variable inv_count is used to store
    # inversion counts in each recursive call
    inv_count = 0
    # We will make a recursive call if and only if
    # we have more than one elements
    if left < right:
        # mid is calculated to divide the array into two subarrays
        # Floor division is must in case of python
        mid = (left + right) // 2
        # It will calculate inversion counts in the left subarray
        inv_count += _mergeSort(arr, temp_arr, left, mid)
        # It will calculate inversion counts in right subarray
        inv_count += _mergeSort(arr, temp_arr, mid + 1, right)
        # It will merge two subarrays in a sorted subarray
        inv_count += merge(arr, temp_arr, left, mid, right)
    return inv_count

# This function will merge two subarrays in a single sorted subarray
def merge(arr, temp_arr, left, mid, right):
    i = left  # Starting index of left subarray
    j = mid + 1  # Starting index of right subarray
    k = left  # Starting index of to be sorted subarray
    inv_count = 0
    # Conditions are checked to make sure that i and j don't exceed their
    # subarray limits.
    while i <= mid and j <= right:
        # There will be no inversion if arr[i] <= arr[j]
        if arr[i] <= arr[j]:
            temp_arr[k] = arr[i]
            k += 1
            i += 1
        else:
            # Inversion will occur.
            temp_arr[k] = arr[j]
            inv_count += mid - i + 1
            k += 1
            j += 1
    # Copy the remaining elements of left subarray into temporary array
    while i <= mid:
        temp_arr[k] = arr[i]
        k += 1
        i += 1
    # Copy the remaining elements of right subarray into temporary array
    while j <= right:
        temp_arr[k] = arr[j]
        k += 1
        j += 1
    # Copy the sorted subarray into Original array
    for loop_var in range(left, right + 1):
        arr[loop_var] = temp_arr[loop_var]
    return inv_count

class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        n = len(A)
        return mergeSort(A, n) % 1000000007

_______________________________________________________________________Approach___________________________________________________________
Algorithm :
Traverse through the array from start to end
For every element find the count of elements smaller than the current number upto that index using another loop.
Sum up the count of inversion for every index.
Print the count of inversions.