
The ship company
Problem Description

The local ship renting service has a special rate plan:

It is up to a passenger to choose a ship.
If the chosen ship has X (X > 0) vacant places at the given moment, then the ticket for such a ship costs X.
The passengers buy tickets in turn, the first person in the queue goes first, then goes the second one, and so on up to A-th person.

You need to tell the maximum and the minimum money that the ship company can earn if all A passengers buy tickets.



Problem Constraints
1 ≤ A ≤ 3000
1 ≤ B ≤ 1000
1 ≤ C[i] ≤ 1000
It is guaranteed that there are at least A empty seats in total.



Input Format
First argument is a integer A denoting the number of passengers in the queue.
Second arugument is a integer B deonting the number of ships.
Third argument is an integer array C of size B where C[i] denotes the number of empty seats in the i-th ship before the ticket office starts selling tickets.



Output Format
Return an array of size 2 denoting the maximum and minimum money that the ship company can earn.



Example Input
Input 1:

 A = 4
 B = 3
 C = [2, 1, 1]
Input 2:

 A = 4
 B = 3
 C = [2, 2, 2]


Example Output
Output 1:

 [5, 5]
Output 2:

[7, 6]


Example Explanation
Explantion 1:

 Maximum money can be earned if the passenger choose : 2(first ship) + 1(first ship) + 1(second ship) + 1(third ship).
 So, the cost will be 5.
 Minimum money can be earned if the passenger choose : 1(senocd ship) + 2(first ship) + 1(first ship) + 1(third ship).
 So, the cost will be 5.
Explanation 2:

 Maximum money can be earned if the passenger choose : 2(first ship) + 2(second ship) + 2(third ship) + 1(first ship).
 So, the cost will be 7.
 Minimum money can be earned if the passenger choose : 2(senocd ship) + 2(first ship) + 1(first ship) + 1(second ship).
 So, the cost will be 6.
_______________________________________________________________________Solution___________________________________________________________
import heapq
class Solution:
    # @param A : integer
    # @param B : integer
    # @param C : list of integers
    # @return a list of integers
    def solve(self, A, B, C):
        maxh = []
        minh = []
        Max = 0
        Min = 0
        for num in C:
            heapq.heappush(maxh, -num)
            heapq.heappush(minh, num)
        
        for i in range(A):
            if maxh:
                m = heapq.heappop(maxh)
                Max += -m
                m = -m
                m = m-1
                if m >= 1:
                    heapq.heappush(maxh, -m)
            if minh:
                n = heapq.heappop(minh)
                Min += n
                n = n-1
                if n >= 1:
                    heapq.heappush(minh, n)
        
        return [Max, Min]
_______________________________________________________________________Given_Solution___________________________________________________________
import heapq

class Solution:
    # @param A : integer
    # @param B : integer
    # @param C : list of integers
    # @return a list of integers
    def solve(self, A, B, C):
        minheap = []
        maxheap = []

    # make 2 priority queues for minimum pop and maximum pop
        heapq.heapify(minheap)
        heapq.heapify(maxheap)

        for i in range(len(C)):
            heapq.heappush(minheap, C[i])
            heapq.heappush(maxheap, -C[i])
    # Store maximum and minimum answer
        max_ans = 0
        min_ans = 0

        i = 0

        while(len(maxheap) != 0 and i < A):
            i += 1
            val = - heapq.heappop(maxheap)          # take the maximum till now

            if(val > 1):
                # decrement the available vacancy for passenger by 1 and again push it into priority queue
                heapq.heappush(maxheap, -val + 1)
            max_ans += val

        i = 0

        while(len(minheap) != 0 and i < A):
            i += 1
            # take the minimum till now
            val = heapq.heappop(minheap)

            if(val > 1):
                # decrement the available vacancy for passenger by 1 and again push it into priority queue
                heapq.heappush(minheap, val - 1)

            min_ans += val

        ans = [max_ans, min_ans]

        return ans

--Java--
public class Solution {
  public int[] solve(int A, int B, int[] C) {
    PriorityQueue < Integer > maxHeap = new PriorityQueue(new CustomComp());
    PriorityQueue < Integer > minHeap = new PriorityQueue < > ();
    for (int a: C) {
      maxHeap.offer(a);
      minHeap.offer(a);
    }
    int[] res = new int[2];
    int maxe = 0;
    int mine = 0;
    int i = 0;
    while (maxHeap.size() > 0 && i < A) {
      i++;
      int val = maxHeap.poll();

      if (val > 1) {
        maxHeap.offer(val - 1);
      }
      maxe += val;
    }
    i = 0;
    while (minHeap.size() > 0 && i < A) {
      i++;
      int val = minHeap.poll();

      if (val > 1) {
        minHeap.offer(val - 1);
      }
      mine += val;
    }
    res[0] = maxe;
    res[1] = mine;
    return res;
  }
}
class CustomComp implements Comparator < Integer > {
  @Override
  public int compare(Integer a, Integer b) {
    return b - a;
  }
}
_______________________________________________________________________Approach___________________________________________________________
Make 2 priority queues one for taking maximum cost tickets till now and other for the minimum.

Now for A passengers pop these 2 queues separately and take the sum of maximum and minimum answers.