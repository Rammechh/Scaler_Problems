Permutations of A in B
Problem Description

You are given two strings A and B of size N and M respectively.

You have to find the count of all permutations of A present in B as a substring. You can assume a string will have only lowercase letters.



Problem Constraints
1 <= N < M <= 105



Input Format
Given two argument, A and B of type String.



Output Format
Return a single Integer, i.e number of permutations of A present in B as a substring.



Example Input
Input 1:

 A = "abc"
 B = "abcbacabc"
Input 2:

 A = "aca"
 B = "acaa"


Example Output
Output 1:

 5
Output 2:

 2


Example Explanation
Explanation 1:

 Permutations of A that are present in B as substring are:
    1. abc
    2. cba
    3. bac
    4. cab
    5. abc
    So ans is 5.
Explanation 2:

 Permutations of A that are present in B as substring are:
    1. aca
    2. caa 

____________________________________________________________Solution_______________________________________________________________
class Solution:
    # @param A : string
    # @param B : string
    # @return an integer
    def solve(self, A, B):
        
        n = len(A)
        m =  len(B)
        
        if n > m:
            return 0
        
        MapA = [0]* 26
        MapB = [0] * 26
        
        for i in range(n):
            MapA[ord(A[i]) - ord('a')] += 1
            MapB[ord(B[i]) - ord('a')] += 1
        
        Count = 0
        
        if MapA == MapB:
            Count += 1
        
        temp = B[0]
        k = 0
        for i in range(n, m):
            k += 1
            MapB[ord(temp) - ord('a')] -= 1
            MapB[ord(B[i]) - ord('a')] += 1

            if MapA == MapB:
                Count += 1
                
            temp = B[k]
            
        return Count

____________________________________________________________Given_Solution_______________________________________________________________
def same(hash1, hash2):
    for i in range(0, 26):
        if hash1[i] != hash2[i]:
            return 0  # not a permutation of A
    return 1  # got a permutation of A in G

class Solution:
    # @param A : string
    # @param B : string
    # @return an integer
    def solve(self, a, g):
        n = len(a)
        m = len(g)
        hash1 = [0] * 26
        hash2 = [0] * 26
        count = 0
        # count frequency of each char in A
        for i in range(0, n):
            hash1[ord(a[i]) - ord("a")] += 1
        # count frequency of each char in first window of size n in G
        for i in range(0, n):
            hash2[ord(g[i]) - ord("a")] += 1
        count += same(hash1, hash2)
        # move current window 1 step ahead
        j = 0
        for i in range(n, m,):
            hash2[ord(g[j]) - ord("a")] -= 1
            hash2[ord(g[i]) - ord("a")] += 1
            count += same(hash1, hash2)
            j += 1
        return count