Aggressive cows
Problem Description

Farmer John has built a new long barn, with N stalls. Given an array of integers A of size N where each element of the array represents the location of the stall, and an integer B which represent the number of cows.

His cows don't like this barn layout and become aggressive towards each other once put into a stall. To prevent the cows from hurting each other, John wants to assign the cows to the stalls, such that the minimum distance between any two of them is as large as possible. What is the largest minimum distance?



Problem Constraints
2 <= N <= 100000
0 <= A[i] <= 109
2 <= B <= N



Input Format
The first argument given is the integer array A.
The second argument given is the integer B.



Output Format
Return the largest minimum distance possible among the cows.



Example Input
Input 1:

A = [1, 2, 3, 4, 5]
B = 3
Input 2:

A = [1, 2]
B = 2


Example Output
Output 1:

 2
Output 2:

 1


Example Explanation
Explanation 1:

 
John can assign the stalls at location 1,3 and 5 to the 3 cows respectively.
So the minimum distance will be 2.
Explanation 2:

 
The minimum distance will be 1.

_______________________________________________________________________Solution______________________________________________________________________

class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        A.sort()
        low = 0
        high = 10 ** 9
        Max = 0
        
        while (low <= high):
            mid = low + (high - low) // 2
            # find mid (maximum min distance b/w 2 cows) and go thro the array if A[i] - prev distance is greater than or equal to expected mid, then increase count by 1
            # if count >= Bcows then low = mid + 1 (since need to find max of min distance we are increasing the distance range) else: high = mid - 1
            
            Count = 1
            prev = A[0]
            for i in range(1, len(A)):
                if A[i] - prev >= mid:
                    Count += 1
                    prev = A[i]
            
            if Count >= B:
                low = mid + 1
                Max = mid
                
            else:
                high = mid - 1
                
        return Max
            
		
________________________________________________________________________Given_Solution______________________________________________________________________

def check(x, A, B):
    n = len(A)
    j = 0
    cnt = 1
    for i in range(1, n):
        if A[i] - A[j] >= x:
            j = i
            cnt += 1
    return cnt >= B


class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        n = len(A)
        A.sort()
        l = 0
        r = 1e9
        ans = 1
        while l <= r:
            mid = int((l + r) / 2)
            if check(mid, A, B):
                ans = mid
                l = mid + 1
            else:
                r = mid - 1
        return ans
		
_______________________________________________________________________Approach______________________________________________________________________

We’ll be doing the binary search for finding the best possible maximum difference.

Since the maximum difference range between 0 to max of array.
If we sort the array then binary search starts with l=0 and r=A[n-1] and we’ve to find the maximum distance.
For mid in binary search, we will check whether there are B stalls such that the minimum distance is greater than equal to mid.
Finally store the maximum value we can get.