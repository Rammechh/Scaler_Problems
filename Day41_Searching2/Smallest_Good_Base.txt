Smallest Good Base
Given an integer A, we call k >= 2 a good base of A, if all digits of A base k are 1. Now given a string representing A, you should return the smallest good base of A in string format.


Input Format

The only argument given is the string representing A.
Output Format

Return the smallest good base of A in string format.
Constraints

3 <= A <= 10^18
For Example

Input 1:
    A = "13"
Output 1:
    "3"     (13 in base 3 is 111)

Input 2:
    A = "4681"
Output 2:
    "8"     (4681 in base 8 is 11111).
	

___________________________________________________________Solution______________________________________________________

class Solution:
    # @param A : string
    # @return a strings
    def solve(self, A):
        """def is_valid(base):
		    #returns 0 if total == n, pos if n > total and neg if n < total
			# for 13 -> It's 3^0 + 3^1 + 3^2
		    total = sum(base**i for i in range(length))
		    return n - total

	    n = int(A)
	    N = len(bin(n)[2:])
	    for length in range(N, 0, -1):
		    low = 2
		    high = n - 1
		    while low <= high:
			    guess = (low + high) // 2
			    v = is_valid(guess)
			    if v < 0:
				    high = guess - 1
			    elif v > 0:
				    low = guess + 1
			    else:
				    return str(guess)"""
				    
		def isValid(base):
			# for 13 -> It's 3^0 + 3^1 + 3^2
		    total = sum(base**i for i in range(length))
		    return n - total
		    
				    
		n = int(A)
		N = len(bin(n)[2:])
		for length in range(N, 0, -1):
		    low = 2
		    high = n
		    while (low <= high):
		        mid = low + (high - low) // 2
		        val = isValid(mid)
		        if val < 0:
				    high = mid - 1
			    elif val > 0:
				    low = mid + 1
			    else:
				    return str(mid)
__________________________________________________________Given_Solution______________________________________________________

public class Solution {
    
    long play(long n, int d) {
        double t = n;
        long r = (long)(Math.pow(t, 1.0 / d) + 1);
        long l = 1;
        while(l <= r) {
            long m = l + (r - l) / 2;
            long sum = 1, cur = 1;
            for(int i = 1; i <= d; i++) {
                cur *= m;   sum += cur;
            }
            if(sum == n)    return m;
            if(sum > n)     r = m - 1;
            else    l = m + 1;
        }
        return 0;
    }
    
    public String solve(String A) {
        long n = Long.parseLong(A);
        long x = 1;
        for(int i = 62; i >= 1; i--) {
            if((x << i) < n) {
                long cur = play(n, i);
                if(cur != 0) {
                    return (cur +"");
                }
            }
        }
        return (n-1 +"");
    }
}