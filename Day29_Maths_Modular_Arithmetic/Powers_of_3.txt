Powers of 3
Problem Description

Given a positive integer A. Return an array of minimum length whose elements represent the powers of 3 and the sum of all the elements is equal to A.



Problem Constraints
1 <= A <= 109



Input Format
Single argument is an integer A.



Output Format
Return an array of minimum length of powers of 3 whose elements sums to A.



Example Input
Input 1:

 13
Input 2:

 3


Example Output
Output 1:

 [1, 3, 9]
Output 2:

 [3]


Example Explanation
Explanation 1:

 30 = 1, 31 = 3, 32 = 9.
 Also, 1 + 3 + 9 = 13. Here A = 13 which can be represented as the sum of 1, 3 and 9.
 

_______________________________________________________________Solution__________________________________________________________ 
class Solution:
    # @param A : integer
    # @return a list of integers
    def solve(self, A):
        #same like decimal to binary div int by 3 and store
        """We convert the given number in base-3 and store it in a vector which gives the minimum powers of 3 required to sum to get the number.
        Now any digit will be either 0, 1 or 2.
        Suppose N=10, in base-3 it can be written as 101.
        It means 10 = 1(3^0) + 0(3^1) + 1*(3^2).
        So, we know that 1 and 9 sums to 10."""
        
        ans = []
        while (A > 0):
            ans.append(A % 3)
            A = A//3
            
        res = []
        for i in range(len(ans)):
            for j in range(ans[i]):
                res.append(3 ** i)
            
        return res

_______________________________________________________________Given_Solution__________________________________________________________
class Solution:
    # @param A : integer
    # @return a list of integers
    def solve(self, A):
        bits = []
        solution = []
    
        while(A != 0):
            bits.append(A % 3);
            A = A // 3;
        
        for i in range(len(bits)):
            if(bits[i] != 0):
                tmp = 0;
                while(tmp < bits[i]):
                    solution.append(pow(3, i));
                    tmp = tmp + 1
        return solution