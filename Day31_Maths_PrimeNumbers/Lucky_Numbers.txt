Lucky Numbers
Problem Description

A lucky number is a number which has exactly 2 distinct prime divisors.

You are given a number A and you need to determine the count of lucky numbers between the range 1 to A (both inclusive).



Problem Constraints
1 <= A <= 50000



Input Format
The first and only argument is an integer A.



Output Format
Return an integer i.e the count of lucky numbers between 1 and A, both inclusive.



Example Input
Input 1:

 A = 8
Input 2:

 A = 12


Example Output
Output 1:

 1
Output 2:

 3


Example Explanation
Explanation 1:

 Between [1, 8] there is only 1 lucky number i.e 6.
 6 has 2 distinct prime factors i.e 2 and 3.
Explanation 2:

 Between [1, 12] there are 3 lucky number: 6, 10 and 12.

_______________________________________________________________________Solution___________________________________________________________
def prime(n):
    p = [1] * (n+1)
    p[0] = 0
    p[1] = 0
    for i in range(2, n+1):
        if p[i]:
            for j in range(2*i, n+1, i):
                p[j] = 0
    ans = [0] * (n+1)
    """for i in range(2,n+1):
        for j in range(i):
            if p[j]:
                if i%j == 0:
                    ans[i] += 1"""
    
    for i in range(2, n+1):
        if p[i] :
            for j in range(2*i, n+1, i):
                ans[j] += 1
        
    return ans
    
class Solution:
    # @param A : integer
    # @return an integer
    def solve(self, A):
        Count = 0
        s = prime(A)
        #print(s)
        # TC  O(N log N) for sieve
        for factor in range(2, A+1):
            if s[factor] == 2:
                Count += 1
        return Count


#Brute force TC O(N2 sqrtN)
"""def prime(n):
    if n < 2:
        return 0
    for i in range(2, n):
        if i * i > n:
            break
        elif n % i == 0:
            return 0
    return 1

class Solution:
    # @param A : integer
    # @return an integer
    def solve(self, A):
        ans = 0
        for i in range(1, A+1):
            Count = 0
            for j in range(1, i+1):
                if prime(j) and i % j == 0:
                    Count += 1
            if Count == 2:
                ans += 1
        return ans"""
_______________________________________________________________________Given_Solution___________________________________________________________
isprime = [1] * 50001

def sieve():
    global isprime
    # Sieve of Eranthoses
    isprime = [1] * 50001
    isprime[1] = 0
    for i in range(2,50001):
        if(isprime[i]):
            for j in range(i*i,50001,i):
                isprime[j] = 0
        

class Solution:
    # @param A : integer
    # @return an integer
    def solve(self, A):
        global isprime
        sieve()
        cnt = [0] * 50001
        
        for i in range(1,A+1):
            j = 1
            while(j*j <= i):
                # Check to increment count of distinct primes
                if(i%j == 0):
                    if(isprime[j]):
                        cnt[i] += 1
                    
                    if((i/j) != j and isprime[i//j]):
                        cnt[i] += 1
                j+=1        
                    
        ans = 0
        for i in range(1,A+1):
            if(cnt[i] == 2):               # Increment count for every lucky num
                ans += 1
        
        return ans

--Java--
public class Solution {
    
    private boolean[] isprime = new boolean[50001];
    
    public int solve(int A) {
        sieve();
        int[] cnt = new int[50001];
        for(int i=0;i<50001;i++) cnt[i] = 0;

        for(int i = 1 ; i <= A ; i++)
        {
            for(int j = 1 ; j*j <= i ; j++)
            {
                // Check to increment count of distinct primes
                if(i%j == 0){
                    if(isprime[j]){
                        cnt[i]++;
                    }
                    if((i/j) != j && isprime[i/j]){
                        cnt[i]++;
                    }
                }
                    
            }
        }
        int ans = 0;
        for(int i = 1 ; i <= A ; i++)
        {
            if(cnt[i] == 2)               // Increment count for every lucky num
            {
                ans++;
            }
        }
        return ans;
        
    }
    
    
    public void sieve(){
        
        //Sieve of Eratosthenes
        for(int i=0;i<50001;i++) isprime[i] = true;
        isprime[1] = false;
        for(long i = 2 ; i <= 50000 ; i++)
        {
            if(isprime[(int)i])
            {
                for(long  j = i * i ; j <= 50000 ; j += i)
                {
                    isprime[(int)j] = false;
                }
            }
        }
    }
}

_______________________________________________________________________Approach___________________________________________________________
Firstly, create an array letâ€™s say isprime where isprime[i] denotes true or false if number i is prime or not.

Now, for every number in the range [1, A] calculate the number of prime divisors and if the count of distinct prime factors for a number is 2 increment the answer.

This can be easily done in O(N * sqrt(N)).

The solution can further be optimised to run in O(N * log(N)). The idea is to use sieve and in place of marking a number non prime
in the array while using sieve just add 1 to it for each prime you iterate. At the end you will have number of prime factors of each
number. Then the rest is cake walk. There are other kinds of sieves as well that you should check out. These are quite fast in
terms of processing.

Link to a blog of sieves :- https://codeforces.com/blog/entry/22229