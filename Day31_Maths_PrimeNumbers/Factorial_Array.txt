Factorial Array
Problem Description

Groot has an array A of size N. Boring right? Groot thought so too, so he decided to construct another array B of the same size and defined elements of B as:

B[i] = factorial of A[i] for every i such that 1<= i <= N.

factorial of a number X denotes (1 x 2 x 3 x 4......(X-1) x (X)).
Now Groot is interested in the total number of non-empty subsequences of array B such that every element in the subsequence has the same non empty set of prime factors.

Since the number can be very large, return it modulo 109 + 7.

NOTE: A set is a data structure having only distinct elements. Eg : the set of prime factors of Y=12 will be {2,3} and not {2,2,3}



Problem Constraints
1 <= N <= 105
1 <= A[i] <= 106
Your code will run against a maximum of 5 test cases.



Input Format
Only argument is an integer array A of size N.



Output Format
Return an integer deonting the total number of non-empty subsequences of array B such that every element in the subsequence has the same set of prime factors modulo 109+7.



Example Input
Input 1:

 A = [2, 3, 2, 3]
Input 2:

 A = [2, 3, 4]


Example Output
Output 1:

 6
Output 2:

 4


Example Explanation
Explanation 1:

 Array B will be : [2, 6, 2, 6]
 The total possible subsequences are 6 : [2], [2], [2, 2], [6], [6], [6, 6].
Input 2:

 Array B will be : [2, 6, 24]
 The total possible subsequences are 4 : [2], [6], [24], [6, 24].

_______________________________________________________________________Solution___________________________________________________________

class Solution:
    # @param A : list of integers
    # @return an integer
    nearest_small_prime = [True for i in range(1000001)]
    p = 2
    while p*p <= 1000001:
        if nearest_small_prime[p]:
            for i in range(2*p, 1000001, p):
                nearest_small_prime[i] = False
        p += 1
    nearest_small_prime[1] = 1
    nearest_small_prime[2] = 2
    nearest_small_prime[3] = 3
    previous_prime = 3
    for index in range(4,1000001):
        if nearest_small_prime[index]:
            nearest_small_prime[index] = index
            previous_prime = index
        else:
            nearest_small_prime[index] = previous_prime
    
    def solve(self, A):
        A_length = len(A)
        freq_dict = {}
        
        for index in range(A_length):
            if A[index] != 1:
                A[index] = self.nearest_small_prime[A[index]]
                freq_dict[A[index]] = freq_dict.get(A[index], 0) + 1
            
        sub_seq_count = 0
        
        for freq in freq_dict.values():
            sub_seq_count += (2**freq) - 1
        
        return sub_seq_count
"""class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        mod = (10 ** 9) + 7
        def power(x, y):
            res = 1
            while(y):
                if(y % 2):
                    res = (x * res) % mod
                y = y // 2
                x = (x * x) % mod
            return res
        def sieve(n):
            s = [1] * (n+1)
            s[0] = 0
            s[1] = 0
            for i in range(n+1):
                if i*i > n:
                    break
                if s[i] == 1:
                    for j in range(2*i, n+1, i):
                        s[j] = 0
            return s
        
        Max = sieve(max(A))
        prime = []
        for i in range(len(Max)):
            if Max[i] == 1:
                prime.append(i)
                
        A.sort()
        tot = 0
        hMap = {}
        for i in range(len(prime)-1):
            Count = 0
            for num in A:
                if num >= prime[i] and num < prime[i+1]:
                    Count += 1

            hMap[i] = Count
            
        for k, v in hMap.items():
            tot += ((power(2,v))-1)
        last = prime[-1]
        Count = 0
        for num in A:
            if num >= last:
                Count += 1
        tot += ((power(2,Count))-1)
        return tot% mod"""
_______________________________________________________________________Given_Solution___________________________________________________________
maxN = 1000001
prime = [0] * maxN
flag = 0
mod = 1e9 + 7

def pre():
    global flag, maxN, prime
    flag = 1
    prime[1] = 1
    for i in range(2, maxN):
        if(prime[i] == 0):
            j = i * i
            while(j < maxN):
                prime[j] = 1
                j += i
def power(x, y):
    res = 1
    while(y):
        if(y % 2):
            res = (x * res) % mod
        y = y // 2
        x = (x * x) % mod
    return res

class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        global flag, prime,mod
        if(flag == 0):
            pre();
        n = len(A)
        A.sort()
        v = []
        for i in range(2, A[n - 1] + 1):
            if(prime[i] == 0):
                v.append(i)
        ans = 0
        j = 0 
        i = 0
        while(i < n and j < len(v)):
            cnt = 0
            if(A[i] == 1):
                i += 1
                continue
            while(i < n and A[i] < v[j]):
                i += 1
                cnt += 1
            temp = power(2, cnt) - 1
            temp += mod
            temp %= mod
            ans += temp
            ans %= mod
            j+=1
        if(i < n):
            temp = power(2, n - i) -1
            temp += mod
            temp %= mod
            ans += temp
            ans %= mod
        return int(ans)

--Java--
public class Solution {
    private int[] prime = new int[1000001];
    private int mod = 1000 * 1000 * 1000 + 7;

    public void pre(){
        int maxN = 1000001;
        prime[1] = 1;
        for(int i = 2; i < maxN; i++){
            if(prime[i] == 0){
                for(int j = 2 * i; j < maxN; j += i) {
                    prime[j] = 1;
                }
            }
        }
    }
    
    public int power(long x, long y){
        long res = 1;
        while(y != 0){
            if(y % 2 == 1){
                res = (x * res) % mod;
            }
            y /= 2;
            x = (x * x) % mod;
        }
        return (int)res;
    }    
    
    public int solve(int[] A) {
        pre();
        int n = A.length;
        Arrays.sort(A);
        //sort(A.begin(), A.end());
        int v[] = new int[100000], itr = 0;
        for(int i = 2; i <= A[n-1]; i++) {
            if(prime[i] == 0){
                v[itr] = i;
                itr++;
            }
        }
        
        long ans = 0;
        int j = 0, i = 0;
        while(i < n && j < itr) {
            int cnt =0;
            if(A[i] == 1){
                i++;
                continue;
            }
            while(i < n && A[i] < v[j]) {
                i++;
                cnt++;
            }
            long temp = power(2, cnt) - 1;
            temp += mod;
            temp %= mod;
            ans += temp;
            ans %= mod;
            j++;
        }
        if(i < n){
            long temp = power(2, n - i) -1;
            temp += mod;
            temp %= mod;
            ans += temp;
            ans %= mod;
        }
        return (int)ans;
    }
}
____________________________________________________________________Approach___________________________________________________________
We can say that factorial of any number between two consective prime number, say (x, y) will have equal set of prime numbers as that of set of prime numbers in x.
Since the factorial of x will contain all prime number less than equal to x.

We will store all the prime number less than equal to highest value in the given array in a sorted order in an auxilary array, say v.

Iterate over all prime number in array v and for each v[i], count the number of values in the array which are less than v[i].
Let cnt denotes that value of each prime number v[i].

All the subsequences of this will be pow(2, cnt) - 1.

Sum all the values and return the answer.

Note that we are talking of non-empty set. So the number 1 will be discarded.

