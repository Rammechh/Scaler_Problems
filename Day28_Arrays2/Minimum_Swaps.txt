Minimum Swaps
Problem Description

Given an array of integers A and an integer B, find and return the minimum number of swaps required to bring all the numbers less than or equal to B together.

Note: It is possible to swap any two elements, not necessarily consecutive.



Problem Constraints
1 <= length of the array <= 100000
-109 <= A[i], B <= 109



Input Format
The first argument given is the integer array A.
The second argument given is the integer B.



Output Format
Return the minimum number of swaps.



Example Input
Input 1:

 A = [1, 12, 10, 3, 14, 10, 5]
 B = 8
Input 2:

 A = [5, 17, 100, 11]
 B = 20


Example Output
Output 1:

 2
Output 2:

 1


Example Explanation
Explanation 1:

 A = [1, 12, 10, 3, 14, 10, 5]
 After swapping  12 and 3, A => [1, 3, 10, 12, 14, 10, 5].
 After swapping  the first occurence of 10 and 5, A => [1, 3, 5, 12, 14, 10, 10].
 Now, all elements less than or equal to 8 are together.
Explanation 2:

 A = [5, 17, 100, 11]
 After swapping 100 and 11, A => [5, 17, 11, 100].
 Now, all elements less than or equal to 20 are together.

________________________________________________________Approach____________________________________________________________

First we will find the number of elements which are less than or equal to B. Let the count comes out to be X.

We know that we need at most X-1 swaps to make all X elements to be consecutive.
Maintain a window of X and check that how many element we need to swap so that all all X elements comes in that window.

We store the minimum of all that and return that.
 
________________________________________________________Solution____________________________________________________________

class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        
        # Sliding Window technique
        # Find all the numbers less than target B
        # Declare 3 var l, r, x
        # Iterate thro if curr_val > B (A[r]>B) then x+=1, if 1st value in window A[l]> B then x-=1 and find min of ans = min(ans, x)
        
        n = len(A)
        cnt = 0
        for num in A:
            if num <= B:
                cnt += 1
                
        # edge case
        if cnt <= 1:
            return 0
            
        ans = 0
        l, r, x = 0, 0, 0
        while (r < cnt):
            if A[r] > B:
                x += 1
            r += 1
        
        ans = x
        while (r < n):
            if A[r] > B:
                x += 1
            if A[l] > B:
                x -= 1
            ans = min(ans, x)
            l += 1
            r += 1
        return ans
________________________________________________________Given_Solution____________________________________________________________
class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        n = len(A)
        cnt = 0
        for x in A:
            if(x <= B):
                cnt+=1
        if(cnt <= 1):
            return 0;
        else:
            l, r, x = 0, 0, 0
            while(r < cnt):
                if(A[r] > B):
                    x+=1
                r+=1
            ans = x
            while(r < n):
                if(A[r] > B):    
                    x+=1
                if(A[l] > B):    
                    x-=1
                ans = min(ans, x)
                r+=1   
                l+=1
        return ans