Balanced Binary Tree
Problem Description

Given a root of binary tree A, determine if it is height-balanced.

A height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.



Problem Constraints
1 <= size of tree <= 100000



Input Format
First and only argument is the root of the tree A.



Output Format
Return 0 / 1 ( 0 for false, 1 for true ) for this problem.



Example Input
Input 1:

    1
   / \
  2   3
Input 2:

 
       1
      /
     2
    /
   3


Example Output
Output 1:

1
Output 2:

0


Example Explanation
Explanation 1:

It is a complete binary tree.
Explanation 2:

Because for the root node, left subtree has depth 2 and right subtree has depth 0. 
Difference = 2 > 1. 

_______________________________________________________________________Solution___________________________________________________________
# Definition for a  binary tree node
# class TreeNode:
#	def __init__(self, x):
#		self.val = x
#		self.left = None
#		self.right = None

class Solution:
	# @param A : root node of tree
	# @return an integer
	def isBalanced(self, A):

        def balanced(root):
            if root == None:
                return (0, 1)
                
            left = balanced(root.left)
            right = balanced(root.right)
            
            if abs(left[0] - right[0]) > 1:
                return (max(left[0], right[0])+1, 0)
            else:
                b = left[1] * right[1]
                return (max(left[0], right[0])+1, b)
            
        ans = balanced(A)[1]
        return ans
_______________________________________________________________________Given_Solution___________________________________________________________
class Solution:
    ans = 1

    def findDepth(self, node, depth):
        if node == None:
            return depth - 1
        lt_dt = self.findDepth(node.left, depth + 1)
        rt_dt = self.findDepth(node.right, depth + 1)
        if abs(lt_dt - rt_dt) > 1:
            self.ans = 0
        return max(lt_dt, rt_dt)

    def isBalanced(self, A):
        self.findDepth(A, 0)
        return self.ans
		
--Java--
/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    int balanced = 1;

    public int isBalanced(TreeNode A) {
        balanced(A);
        return balanced;
    }

    public int balanced(TreeNode A) {
        if (A == null)
            return 0;

        int heightLeft = 1 + balanced(A.left);
        int heightRight = 1 + balanced(A.right);

        if (Math.abs(heightLeft - heightRight) > 1)
            balanced = 0;
        return Math.max(heightLeft, heightRight);
    }
}
_______________________________________________________________________Approach___________________________________________________________

A tree is balanced if :
1) Left subtree is balanced
2) Right subtree is balanced
3) And the difference is height of left and right subtree is atmost 1.

Can you think of a way to simulate that with recursion ?
Note that depth of a tree can also be calculated recursively as max(depth(rightSubtree), depth(leftSubtree)) + 1.
