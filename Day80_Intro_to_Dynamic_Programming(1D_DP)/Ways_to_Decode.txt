Ways to Decode
Problem Description
A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message denoted by string A containing digits, determine the total number of ways to decode it modulo 109 + 7.



Problem Constraints
1 <= length(A) <= 105



Input Format
The first and the only argument is a string A.



Output Format
Return an integer, representing the number of ways to decode the string modulo 109 + 7.



Example Input
Input 1:

 A = "12"
Input 2:

 A = "8"


Example Output
Output 1:

 2
Output 2:

 1


Example Explanation
Explanation 1:

 Given encoded message "8", it could be decoded as only "H" (8).
 The number of ways decoding "8" is 1.
Explanation 2:

 Given encoded message "12", it could be decoded as "AB" (1, 2) or "L" (12).
 The number of ways decoding "12" is 2.
_______________________________________________________________________Solution_____________________________________________________________________________

--Java--
public class Solution {
    public int numDecodings(String A) {
        int n = A.length();
        int[] dp = new int[n+1];
        dp[0] = 1;
        if(A.charAt(0) == '0')
            dp[1] = 0;
        else    
            dp[1] = 1;
        
        for(int i=2; i<n+1; i++){
            
            int first = Integer.valueOf(A.substring(i - 1, i));
            int second = Integer.valueOf(A.substring(i - 2, i));
            
            if (first >0 && first <=9) 
                dp[i] += dp[i-1] % 1000000007;
            if (second > 9 && second <=26)
                dp[i] += dp[i-2] % 1000000007;
        }
        return dp[n] % 1000000007;
    }
}


--python--
class Solution:
	# @param A : string
	# @return an integer
	def numDecodings(self, A):
        if not A:
            return 0
        
        dp = [0 for x in range(len(A)+1)]
        dp[0] = 1
        dp[1] = 0 if A[0] == "0" else 1
        
        for i in range(2, len(A)+1):
            if int(A[i-1:i]) >0 and int(A[i-1:i]) <=9:
                dp[i] += dp[i-1]
            if int(A[i-2:i]) >9 and int(A[i-2:i]) <=26:
                dp[i] += dp[i-2]
        
        return dp[len(A)] % (pow(10,9)+7)

_______________________________________________________________________Given_Solution_____________________________________________________________________________
--Java--
public class Solution {

  private int[] dp;
  private int N;
  private String A;

  public int numDecodings(String A) {

    N = A.length();

    if (A == null)
      return 0;

    dp = new int[N];
    Arrays.fill(dp, -1);
    this.A = A;

    return rec(N - 1);
  }

  private int rec(int index) {

    if (index < 0)
      return 1;

    if (dp[index] != -1)
      return dp[index] % 1000000007;

    int ways = 0;

    if (A.charAt(index) > '0') {
      ways = rec(index - 1);
      ways %= 1000000007;
    }

    if (isValidTwoDigits(index)) {
      ways += rec(index - 2);
      ways %= 1000000007;
    }

    return dp[index] = ways;
  }

  private boolean isValidTwoDigits(int index) {
    if (index > 0 && (A.charAt(index - 1) == '1' || A.charAt(index - 1) == '2' && A.charAt(index) < '7'))
      return true;

    return false;
  }

}


--python--
class Solution:
    # @param A : string
    # @return an integer
    def numDecodings(self, A):
        mod = 1000000007
        N = [0 for x in range(len(A))]
        A = [int(i) for i in A]
        if A[0] > 0:
            N[0] = 1
        for i in range(1, len(A)):
            if A[i] > 0:
                N[i] += N[i-1]
                N[i] %= mod
            if A[i-1]*10 + A[i] <= 26 and A[i-1]*10 + A[i] >= 10:
                if i == 1:
                    N[i] += 1
                    N[i] %= mod
                else:
                    N[i] += N[i-2]
                    N[i] %= mod
        return N[len(A)-1] % mod
_______________________________________________________________________Approach_____________________________________________________________________________
Lets first look at the bruteforce solution.
It only makes sense to look at 1 digit or 2 digit pairs ( as 3 digit sequence will be greater than 26 ).

So, when looking at the start of the string, we can either form a one digit code, and then look at the ways of forming the rest of the string of length L - 1, or we can form 2 digit code if its valid and add up the ways of decoding rest of the string of length L - 2.
This obviously is exponential.

The code would go something like the following :

 int ways(string &s, int startIndex) {
    // BASE CASES

    int answer = 0;
if (isValid(s[startIndex])) answer += ways(s, startIndex + 1);
    if (isValid(s[startIndex] + s[startIndex + 1])) answer += ways(s, startIndex + 2);
    return answer;
 }
Note that in this case, startIndex can only take L number of values. Can you use the fact to store the result so that the function processing does not happen so many times ?