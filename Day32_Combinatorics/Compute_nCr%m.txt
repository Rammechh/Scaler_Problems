Compute nCr % m
Problem Description

Given three integers A, B and C, where A represents n, B represents r and C represents m, find and return the value of nCr % m where nCr % m = (n!/((n-r)!*r!))% m.

x! means factorial of x i.e. x! = 1 * 2 * 3... * x.



Problem Constraints
1 <= A * B <= 106

1 <= B <= A

1 <= C <= 106



Input Format
The first argument given is integer A ( = n).
The second argument given is integer B ( = r).
The third argument given is integer C ( = m).


Output Format
Return the value of nCr % m.



Example Input
Input 1:

 A = 5
 B = 2
 C = 13
Input 2:

 A = 6
 B = 2
 C = 13


Example Output
Output 1:

 10
Output 2:

 2


Example Explanation
Explanation 1:

 The value of 5C2 % 11 is 10.
Explanation 2:

 The value of 6C2 % 13 is 2.
 
_______________________________________________________________________Solution___________________________________________________________
class Solution:
    # @param A : integer
    # @param B : integer
    # @param C : integer
    # @return an integer
    def solve(self, A, B, C):
        
        #Brute Force since cal the same value again use Dp to Optimize
        """def mod(n,r,m):
            if (r>n):
                return 0
            if n==r or r ==0:
                return 1
            return ((mod(n-1,r,m) %m) + (mod(n-1,r-1,m) %m)) % m
        
        return mod(A,B,C)"""
        

        # Dp Problem
        #T.C = O(n * r) S.C = O(n*r)
        mat = [[-1 for i in range(B+1)] for j in range(A+1)]
        
        for i in range(1, A+1):
            n = min(i,B)
            for j in range(n+1):
                if j > i:
                    mat[i][j] = 0
                elif i == j or j == 0:
                    mat[i][j] = 1
                else:
                    mat[i][j] = ((mat[i-1][j-1])%C + (mat[i-1][j])%C)%C
                    
        return mat[A][B]%C
_______________________________________________________________________Given_Solution___________________________________________________________
class Solution:
    # @param A : integer
    # @param B : integer
    # @param C : integer
    # @return an integer
    def solve(self, A, B, C):
        dp = [[0 for i in range(B + 1)] for j in range(A + 1)]
        for i in range(A + 1):
            for j in range(min(i, B) + 1):
                if(j == i or j == 0):
                    dp[i][j] = 1
                else:
                    dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j]) % C
        return (dp[A][B] % C)
		
--Java--
public class Solution {
    public int solve(int A, int B, int C) {
        //pascal triangle
        int[][] dp = new int[A + 1][B + 1];
        for(int i = 0; i <= A; i++) {
            for(int j = 0; j <= Math.min(i, B); j++) {
                if(j == i || j == 0) {
                    dp[i][j] = 1;
                } else {
                    dp[i][j] = (dp[i - 1][j - 1] % C + dp[i - 1][j] % C) % C;
                }
            }
        }
        return dp[A][B] % C;
    }
}
_______________________________________________________________________Approach___________________________________________________________
If we calculate nCr by calculating factorial of each number and then doing n! / (r! * (n-r)!) % m. This will not work as the factorial can be very large and will cause overflow.

As we know nCr = n-1Cr-1 + n-1Cr.

So we will use Dynamic Programming approach and calculate the value of nCr.