Sorted Permutation Rank
Problem Description

Given a string A. Find the rank of the string amongst its permutations sorted lexicographically.
Assume that no characters are repeated.

Note: The answer might not fit in an integer, so return your answer % 1000003



Problem Constraints
1 <= |A| <= 1000



Input Format
First argument is a string A.



Output Format
Return an integer denoting the rank of the given string.



Example Input
Input 1:

A = "acb"
Input 2:

A = "a"


Example Output
Output 1:

2
Output 2:

1


Example Explanation
Explanation 1:

Given A = "acb".
The order permutations with letters 'a', 'c', and 'b' : 
abc
acb
bac
bca
cab
cba
So, the rank of A is 2.
Explanation 2:

Given A = "a".
Rank is clearly 1.

________________________________________________________Solution____________________________________________________________

class Solution:
	# @param A : string
	# @return an integer
	def findRank(self, A):
	    
	    # for A = "BCA" -> By choosing 'A' char we have "A__ -> A_(2choices B/C)_(1choice)"" (2!) ways to arrange
	    # By choosing B --> we have "B__ -> B_(A can be choosen lexi smaller than C)_" so (1!) ways to arrange
	    # 2 + 1 = 3
	    # So 4th element will be BCA
	    
	    n = len(A)
	    ans = 0
        for i in range(n):
	        Count = 0
	        for j in range(i+1, n):
	            if ord(A[j])< ord(A[i]):
	                Count += 1
	        ans += (math.factorial(n-i-1) * Count)
	  
	    return(ans+1) % 1000003 
		
________________________________________________________Given_Solution____________________________________________________________

from math import factorial
class Solution:
    # @param A : string
    # @return an integer
    def findRank(self, A):
        res = 0
        s = sorted(A)
        lna = len(A)
        e = 1
        vis = set()
        for i in A:
            c = 0
            for j in s:
                if j in vis:
                    continue
                if j >= i:
                    vis.add(j)
                    break
                c += 1
            res += c * factorial(lna - e)
            e += 1
        return (res + 1) % 1000003