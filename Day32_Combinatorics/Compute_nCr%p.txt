Compute nCr % p
Problem Description

Given three integers A, B and C, where A represents n, B represents r and C represents p and p is a prime number greater than equal to n, find and return the value of nCr % p where nCr % p = (n! / ((n-r)! * r!)) % p.

x! means factorial of x i.e. x! = 1 * 2 * 3... * x.

NOTE: For this problem, we are considering 1 as a prime.



Problem Constraints
1 <= A <= 106
1 <= B <= A
A <= C <= 109+7


Input Format
The first argument given is the integer A ( = n).
The second argument given is the integer B ( = r).
The third argument given is the integer C ( = p).



Output Format
Return the value of nCr % p.



Example Input
Input 1:

 A = 5
 B = 2
 C = 13
Input 2:

 A = 6
 B = 2
 C = 13


Example Output
Output 1:

 10
Output 2:

 2


Example Explanation
Explanation 1:

 nCr( n=5 and r=2) = 10.
 p=13. Therefore, nCr%p = 10.

_______________________________________________________________________Solution___________________________________________________________
class Solution:
    # @param A : integer
    # @param B : integer
    # @param C : integer
    # @return an integer
    def solve(self, A, B, C):
        """n = fact(A,C)
        r = inv(B,C)
        print(r)
        dif = inv(A-B,C)
        print(dif)
        ans = (n * r * dif) % C
        
        return ans % C"""
        
        
        num = den = 1
        if(A == 1 and B == 1 and C == 1):
            return 0
        B = min(B, A - B)
        for i in range(B):
            num = (num * (A - i)) % C
            den = (den * (i + 1)) % C
        return (num * pow(den, C - 2, C)) % C
		
_______________________________________________________________________Given_Solution___________________________________________________________
Approach 1:

class Solution:
    # @param A : integer
    # @param B : integer
    # @param C : integer
    # @return an integer
    def solve(self, A, B, C):
        num = den = 1
        if(A == 1 and B == 1 and C == 1):
            return 0
        B = min(B, A - B)
        for i in range(B):
            num = (num * (A - i)) % C
            den = (den * (i + 1)) % C
        return (num * pow(den, C - 2, C)) % C
Approach 2:

class Solution:
    # @param A : integer
    # @param B : integer
    # @param C : integer
    # @return an integer
    def solve(self, A, B, C):
        if C == 1:
            return 0
        if A == 1:
            return 1
        mx = max(A - B, B)
        mn = min(A - B, B)
        denominator = 1
        numerator = 1
        for n in range(mx + 1, A + 1):
            numerator = (numerator * n)
            if numerator >= C:
                numerator %= C
        for d in range(2, mn + 1):
            denominator = (denominator * d)
            if denominator >= C:
                denominator %= C
        return (numerator * pow(denominator, C - 2, C)) % C
		
--Java--
public class Solution {
    public int solve(int A, int B, int C) {
        if(C == 1)
            return 0;
        if(A == 1)
            return 1;
        long mx = Math.max(A - B, B);
        long mn = Math.min(A - B, B);
        long denominator = 1, numerator = 1;
        for(long n = mx + 1; n < A + 1; n++) {   
            numerator = (numerator * n);
            if(numerator >= C)
                numerator %= C;
        }
        for(int d = 2 ; d < mn + 1; d++) {
            denominator = (denominator * d);
            if(denominator >= C)
                denominator %= C;
        }
        return (int)((numerator * pow(denominator, C - 2, C)) % C);
    }
    
    public long pow(long x, int y, int k) {
        long result = 1;
        while(y > 0) {
            if(y % 2 == 1) {
                result = (result * x) % k;
                y--;
            }
            y >>= 1;
            x = (x * x) % k;
        }
        return result;
    }
}
_______________________________________________________________________Approach___________________________________________________________
a^p = a (mod p) where p is a prime number.

a^(p-1) = 1 (mod p)

Multiply by a inverse on both sides

a^(p-2) = a^(-1) (mod p).