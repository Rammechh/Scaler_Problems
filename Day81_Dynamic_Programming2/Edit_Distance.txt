Edit Distance
Problem Description

Given two strings A and B, find the minimum number of steps required to convert A to B. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

Insert a character
Delete a character
Replace a character


Problem Constraints
1 <= length(A), length(B) <= 450



Input Format
The first argument of input contains a string, A.
The second argument of input contains a string, B.



Output Format
Return an integer, representing the minimum number of steps required.



Example Input
Input 1:

 A = "abad"
 B = "abac"
Input 2:

 A = "Anshuman"
 B = "Antihuman


Example Output
Output 1:

 1
Output 2:

 2


Example Explanation
Exlanation 1:

 A = "abad" and B = "abac"
 After applying operation: Replace d with c. We get A = B.
 
Explanation 2:

 A = "Anshuman" and B = "Antihuman"
 After applying operations: Replace s with t and insert i before h. We get A = B.
 
_______________________________________________________________________Solution___________________________________________________________
from functools import lru_cache
import sys
sys.setrecursionlimit(10**6)
class Solution:
    # @param A : string
    # @param B : string
    # @return an integer
    def minDistance(self, A, B):
        
        # top-down recursive
        '''@lru_cache(None)
        def distance(i, j):
            
            if i>= len(A) or j >= len(B):
                return max(len(A)-i, len(B)-j)
            
            if A[i] == B[j]:
                return distance(i+1, j+1)
                
            else:
                insert = 1 + distance(i, j+1)
                delete = 1 + distance(i+1, j)
                replace = 1 + distance(i+1, j+1)
                
                return min(insert, delete, replace)
                
        return distance(0, 0)'''
        
        #bottom-up recursive
        '''@lru_cache(None)
        def distance(i, j):
            
            if i ==0:
                return j
            
            if j == 0:
                return i
            
            if A[i-1] == B[j-1]:
                return distance(i-1, j-1)
            
            else:
                return 1 + min(distance(i, j-1), distance(i-1, j), distance(i-1, j-1))
                
        
        return distance(len(A), len(B))'''
        
        # dp iterative
        
        n = len(A) + 1
        m = len(B) + 1
        dp = [[-1] * m for _ in range(n)]
        
        def distance(i, j):
            
            for i in range(n):
                for j in range(m):
                    if i ==0:
                        dp[i][j] = j
                        continue
                    
                    if j == 0:
                        dp[i][j] = i
                        continue
                    
                    if A[i-1] == B[j-1]:
                        dp[i][j] = dp[i-1][j-1]
                    
                    else:
                        dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1])
                        
            return dp[i][j]
        
        #bottom up with memoization
        '''n = len(A) + 1
        m = len(B) + 1
        dp = [[-1] * m for _ in range(n)]
        
        def distance(i, j):
            
            if i ==0:
                return j
            
            if j == 0:
                return i
                
            if dp[i][j] != -1:
                return dp[i][j]
            
            if A[i-1] == B[j-1]:
                dp[i][j] = distance(i-1, j-1)
            
            else:
                dp[i][j] = 1 + min(distance(i, j-1), distance(i-1, j), distance(i-1, j-1))
                
            return dp[i][j]'''
        return distance(len(A), len(B))
_______________________________________________________________________Given_Solution___________________________________________________________
class Solution:
	# @param A : string
	# @param B : string
	# @return an integer
	def minDistance(self, A, B):
        word1 = A
        word2 = B
        # DP talbe, i is the position in word1, and j is the position in word2
        distance = [[0 for j in range(len(word2)+1)] for i in range(0, len(word1)+1)]
    # when i or j=0 means empty string, the distance is the length of another string
        for  i in range(0, len(distance)):
            for j in range(0, len(distance[0])):
                if (i == 0):
                    distance[i][j] = j
                elif (j == 0):
                    distance[i][j] = i
        # if word1[i] == word2[j], then the distance of i and j is the previous i and j
        # otherwise we either replace, insert or delete a char
        # when insert a char to word1 it means we are trying to match word1 at i-1 to word2 at j
        # when delete a char from word1 it equals to insert a char to word2, which
        # means we are trying to match word1 at i to word2 at j-1
        # when replace a char to word1, then we add one step to previous i and j
        for i in range(1, len(distance)):
            for j in range(1, len(distance[0])):
                if (word1[i - 1] == word2[j - 1]):
                    distance[i][j] = distance[i - 1][j - 1]
                else:
                    distance[i][j] = 1 + min(distance[i - 1][j - 1], min(distance[i - 1][j], distance[i][j - 1]))
        
        return distance[len(word1)][len(word2)]
_______________________________________________________________________Approach___________________________________________________________
This is a very standard Dynamic programming problem.

Lets look at the bruteforce approach for finding edit distance of S1 and S2.
We are trying to modify S1 to become S2.

We look at the first character of both the strings.
If they match, we can look at the answer from remaining part of S1 and S2.
If they don’t, we have 3 options.
1) Insert S2’s first character and then solve the problem for remaining part of S2, and S1.
2) Delete S1’s first character and trying to match S1’s remaining string with S2.
3) Replace S1’s first character with S2’s first character in which case we solve the problem for remaining part of S1 and S2.

The code would probably look something like this :

int editDistance(string &S1, int index1, string &S2, int index2) {
// BASE CASES

if (S1[index1] == S2[index2]) {
     return editDistance(S1, index1 + 1, S2, index2 + 1);
} else {
     return min(
    1 + editDistance(S1, index1 + 1, S2, index2), // Delete S1 char
            1 + editDistance(S1, index1, S2, index2 + 1), // Insert S2 char
            1 + editDistance(S1, index1 + 1, S2, index2 + 1) // Replace S1 first char with S2 first char
     );
} }
The above approach is definitely exponential.
However, lets look at the number of ways in which the function can be called. S1 and S2 remain constant. The only thing changing is index1 and index2 which can take len(S1) * len(S2) number of values. Can you use it to memoize ?

You can use the above observation to also come up with a non recursive solution.