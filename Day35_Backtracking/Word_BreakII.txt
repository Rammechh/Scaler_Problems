Word Break II
Given a string A and a dictionary of words B, add spaces in A to construct a sentence where each word is a valid dictionary word.

Return all such possible sentences.

Note : Make sure the strings are sorted in your result.

Input Format:

The first argument is a string, A.
The second argument is an array of strings, B.
Output Format:

Return a vector of strings representing the answer as described in the problem statement.
Constraints:

1 <= len(A) <= 50
1 <= len(B) <= 25
1 <= len(B[i]) <= 20
Examples:

Input 1:
    A = "b"
    B = ["aabbb"]

Output 1:
    []

Input 1:
    A = "catsanddog",
    B = ["cat", "cats", "and", "sand", "dog"]

Output 1:
    ["cat sand dog", "cats and dog"]
	
_______________________________________________________________________Solution___________________________________________________________
class Solution:
	# @param A : string
	# @param B : list of strings
	# @return a list of strings
	
	def wordBreak(self, A, B):
	    def check(s, hMap, path, res):
	        if not s:
	            res.append(path.strip())
	        for i in range(len(s)):
	            if s[:i+1] in hMap:
	                check(s[i+1:],hMap,  " ".join((path,s[:i+1])), res)
            
        res = []
        check(A, B, "", res)
        return res
_______________________________________________________________________Given_Solution___________________________________________________________
class Solution:
    # @param A : string
    # @param B : list of strings
    # @return a list of strings
    def wordBreak(self, A, B):
        sentences = [[] for i in range(len(A))]
        wordLenList = set(map(len, B))
        for startIndex in xrange(len(A) - 1, -1, -1):
            for wordLen in wordLenList:
                if startIndex + wordLen > len(A) or A[startIndex: startIndex + wordLen] not in B:
                    continue
                if startIndex + wordLen == len(A):
                    sentences[startIndex].append(A[startIndex: startIndex + wordLen])
                else:
                    for sentence in sentences[startIndex + wordLen]:
                        sentences[startIndex].append(A[startIndex: startIndex + wordLen] + " " + sentence)
        return sentences[0]

--Java--
public class Solution {
	public ArrayList<String> wordBreak(String s, ArrayList<String> dict) {
	//create an array of ArrayList<String>
	Set<String> foo = new HashSet<>(dict);
        ArrayList<String> dp[] = new ArrayList[s.length()+1];
        dp[0] = new ArrayList<String>();
     
        for(int i=0; i<s.length(); i++){
            if( dp[i] == null ) 
                continue; 
     
            for(String word:foo){
                int len = word.length();
                int end = i+len;
                if(end > s.length()) 
                    continue;
     
                if(s.substring(i,end).equals(word)){
                    if(dp[end] == null){
                        dp[end] = new ArrayList<String>();
                    }
                    dp[end].add(word);
                }
            }
        }
     
        ArrayList<String> result = new ArrayList<String>();
        if(dp[s.length()] == null) 
            return result; 
     
        ArrayList<String> temp = new ArrayList<String>();
        dfs(dp, s.length(), result, temp);
        Collections.sort(result);
        return result;
    }
    
 
private void dfs(List<String> dp[],int end,List<String> result, ArrayList<String> tmp){
    if(end <= 0){
        String path = tmp.get(tmp.size()-1);
        for(int i=tmp.size()-2; i>=0; i--){
            path += " " + tmp.get(i) ;
        }
 
        result.add(path);
        return;
    }
 
    for(String str : dp[end]){
        tmp.add(str);
        dfs(dp, end-str.length(), result, tmp);
        tmp.remove(tmp.size()-1);
    }
}
}

_______________________________________________________________________Approach___________________________________________________________
Lets again look at the bruteforce solution.
You start exploring every substring from the start of the string, and check if its in the dictionary. If it is, then you check if it is possible to form rest of the string using the dictionary words. If yes, you append the current substring to all the substring possible from rest of the string. If none of the substrings qualify, then there are no sentences possible from this string. .

So something like this :


vector<string> wordBreak(int index, string &s, unordered_set<string> &dict) {
    // BASE CASES

    vector<string> sentences;
    // try to construct all substrings.
    for (int i = index; i < s.length(); i++) {
        substring = *the substring s[index..i] with i inclusive*
            if (dict contains substring) {
                vector<string> ret = wordBreak(i + 1, s, dict);
                foreach (sentence in ret) {
                    sentences.push_back(substring + " " + sentence);
                }          
            }
    }
    return sentences;
}

This solution itself is exponential. However, do note that we are doing a lot of repetitive work.
Do note, that index in the wordBreak function call can only take s.length() number of values [0, s.length]. What if we stored the result of the function somehow and did not process it everytime the function is called ?