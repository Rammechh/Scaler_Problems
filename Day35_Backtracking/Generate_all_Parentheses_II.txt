Generate all Parentheses II
Problem Description

Given an integer A pairs of parentheses, write a function to generate all combinations of well-formed parentheses of length 2*A.



Problem Constraints
1 <= A <= 20



Input Format
First and only argument is integer A.



Output Format
Return a sorted list of all possible paranthesis.



Example Input
Input 1:

A = 3
Input 2:

A = 1


Example Output
Output 1:

[ "((()))", "(()())", "(())()", "()(())", "()()()" ]
Output 2:

[ "()" ]


Example Explanation
Explanation 1:

 All paranthesis are given in the output list.
Explanation 2:

 All paranthesis are given in the output list.


_______________________________________________________________________Solution___________________________________________________________
class Solution:
	# @param A : integer
	# @return a list of strings
	def generateParenthesis(self, A):
        res = []
        def generate(s, open, close):
            if close > open :
                return 
            if open + close == 2 * A:
                if open == close:
                    res.append(s)
                return 
            
            generate(s + "(", open + 1, close)
            generate(s + ")", open, close + 1)
        
        s = ""
        generate(s, 0, 0)
        
        return res
		
_______________________________________________________________________Given_Solution___________________________________________________________

class Solution:
    def generateParenthesis(self, A):
        self.output = set()
        self.generate(A, ['('])
        return sorted(self.output)

    def generate(self, n, braces):
        if len(braces) == 2*n:
            self.output.add(''.join(braces))
            return
        if braces.count('(') < n:
            self.generate(n, braces + ['('])
        if braces.count(')') < braces.count('('):
            self.generate(n, braces + [')'])
			
_______________________________________________________________________Approach___________________________________________________________

Again, think recursion.
At every step, you have 2 options :
1) Add ‘(‘ to the string.
2) Add ‘)’ to the string.
However, you need to make sure, that the number of closing brackets do not exceed number of opening brackets at any point of time.
Also, make sure that the number of opening brackets never exceeds n.