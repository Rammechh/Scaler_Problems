Palindrome Partitioning
Problem Description

Given a string A, partition A such that every string of the partition is a palindrome.

Return all possible palindrome partitioning of A.

Ordering the results in the answer : Entry i will come before Entry j if :
len(Entryi[0]) < len(Entryj[0]) OR
(len(Entryi[0]) == len(Entryj[0]) AND len(Entryi[1]) < len(Entryj[1])) OR * * *
(len(Entryi[0]) == len(Entryj[0]) AND ... len(Entryi[k] < len(Entryj[k]))


Problem Constraints
1 <= len(A) <= 15



Input Format
First argument is a string A of lowercase characters.



Output Format
Return a list of all possible palindrome partitioning of s.



Example Input
Input 1:

A = "aab"
Input 2:

A = "a"


Example Output
Output 1:

 [
    ["a","a","b"]
    ["aa","b"],
  ]
Output 2:

 [
    ["a"]
  ]


Example Explanation
Explanation 1:

In the given example, ["a", "a", "b"] comes before ["aa", "b"] because len("a") < len("aa").
Explanation 2:

In the given example, only partition possible is "a" .

_______________________________________________________________________Solution___________________________________________________________
class Solution:
    # @param A : string
    # @return a list of list of strings
    def partition(self, A):
        
        def isPal(s):
            return s == s[::-1]
            
        def palindrome(s, path, res):
            if not s:
                res.append(path)
            
            for i in range(1, len(s)+1):
                if isPal(s[:i]):
                    palindrome(s[i:], path+[s[:i]], res)
        res = []
        palindrome(A, [], res)
        return res   
        
_______________________________________________________________________Given_Solution___________________________________________________________
class Solution:
    # @param A : string
    # @return a list of list of strings
    def partition(self, A):
    	result = []
    	self.partition_2(result, [], A, 0)
    	return result
    def partition_2(self, result, cur, A, i):
    	if i == len(A):
    		result.append(list(cur))
    	for j in range(i, len(A)):
    		if self.isPalindrome(A[i:j+1]):
    			cur.append(A[i:j+1])
    			self.partition_2(result, cur, A, j+1)
    			cur.pop()
    def isPalindrome(self, A):
    	return list(A) == list(reversed(A))

--Java--
public class Solution {
    private int isPalin[][];
    private int N;
    private ArrayList < ArrayList < String >> mRes;
    private String mString;
    public ArrayList < ArrayList < String >> partition(String A) {
        mRes = new ArrayList < > ();
        N = A.length();
        if (N == 0)
            return null;
        mString = A;
        isPalin = new int[N][N];
        for (int i = 0; i < N; i++) {
            Arrays.fill(isPalin[i], -1);
        }
        ArrayList < String > str = new ArrayList < > ();
        rec(str, 0);
        return mRes;
    }
    public void rec(ArrayList < String > str, int index) {
        if (index == N) {
            mRes.add(new ArrayList(str));
            return;
        }
        for (int i = index; i < N; i++) {
            if (isPalindrome(index, i)) {
                str.add(mString.substring(index, i + 1));
                rec(str, i + 1);
                str.remove(str.size() - 1);
            }
        }
    }
    public boolean isPalindrome(int start, int end) {
        if (start < 0 || start >= N || end < 0 || end >= N)
            return false;
        if (isPalin[start][end] != -1)
            return isPalin[start][end] == 1;
        int i, j;
        for (i = start, j = end; i < j; i++, j--) {
            if (mString.charAt(i) != mString.charAt(j)) {
                isPalin[start][end] = 0;
                return false;
            }
        }
        isPalin[start][end] = 1;
        return true;
    }
}
_______________________________________________________________________Approach___________________________________________________________
We can use recursion to generate all possible palindrome partitioning of s.

When on index i, you incrementally check all substring starting from i for being palindromic. If found, you recursively solve the problem for the remaining string and add it to your solution. Start this recursion from starting position of the string.

PS: You can optimize your solution by not computing the answer for same index multiple times using Dynamic Programming.