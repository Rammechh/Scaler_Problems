SIXLETS
Problem Description

Given a array of integers A of size N and an integer B.

Return number of non-empty subsequences of A of size B having sum <= 1000.



Problem Constraints
1 <= N <= 20

1 <= A[i] <= 1000

1 <= B <= N



Input Format
The first argument given is the integer array A.

The second argument given is the integer B.



Output Format
Return number of subsequences of A of size B having sum <= 1000.



Example Input
Input 1:

    A = [1, 2, 8]
    B = 2
Input 2:

    A = [5, 17, 1000, 11]
    B = 4


Example Output
Output 1:

3
Output 2:

0


Example Explanation
Explanation 1:

 {1, 2}, {1, 8}, {2, 8}
Explanation 1:

 No valid subsequence
 
_______________________________________________________________________Solution___________________________________________________________

def sixlets(A, B, i, curlen, Sum, Count):
    if Sum > 1000:
        return Count
    if curlen ==B:
        Count += 1
        return Count
    if i == len(A):
        return Count
    
    Count = sixlets(A, B, i+1, curlen+1, Sum+A[i], Count)
    Count = sixlets(A, B, i+1, curlen, Sum, Count)
    return Count
    
class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
        
    def solve(self, A, B):
        return sixlets(A, B, 0, 0, 0, 0)
______________________________________________________________________Given_Solution___________________________________________________________	
ans = 0
def getans(A, B, siz, sum, index):
    global ans
    if sum > 1000:
        return
    if siz == B:
        ans += 1
        return
    if index == len(A):
        return
    for i in range(index, len(A)):
        getans(A, B, siz + 1, sum + A[i], i + 1)
class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        n = len(A)
        global ans
        ans = 0
        getans(A, B, 0, 0, 0)
        return ans

______________________________________________________________________Approach___________________________________________________________

For N <= 20, we can use recursion technique to count all non-empty subsequences of A of size B having sum <= 1000.

initialize ans = 0
Consider we are at ith index with: current sum of subsequence = curSum
current size of subsequence = curSize

if (curSize == B && curSum <= 1000)
    increment the ans;
else
    for(int j = i+1; j<A.size();j++){
        Add the jth element to the current subsequence
        and recur for the next index with curSum = curSum + A[j]
                                          curSize = curSize + 1
    } 