Combinations
Problem Description

Given two integers A and B, return all possible combinations of B numbers out of 1 2 3 ... A .

Make sure the combinations are sorted.

To elaborate,

Within every entry, elements should be sorted. [1, 4] is a valid entry while [4, 1] is not.
Entries should be sorted within themselves.
WARNING: DO NOT USE LIBRARY FUNCTION FOR GENERATING COMBINATIONS.



Problem Constraints
1 <= A, B <= 10



Input Format
First argument is an integer A.
Second argument is an integer B.



Output Format
Return a 2-D vector denoting all possible combinations.



Example Input
Input 1:

 A = 4
 B = 2
Input 2:

 A = 3
 B = 2


Example Output
Output 1:

 [
  [1, 2],
  [1, 3],
  [1, 4],
  [2, 3],
  [2, 4],
  [3, 4],
 ]
Output 2:

 [
  [1, 2],
  [1, 3],
  [2, 3]
 ] 


Example Explanation
Explanation 1:

All the possible combinations of size 2 in sorted order.
_______________________________________________________________________Solution___________________________________________________________
class Solution:
	# @param A : integer
	# @param B : integer
	# @return a list of list of integers
	def combine(self, A, B):
	    v, v1 = [], []
        def comb(A, B, st, v1):
            if len(v1) == B:
                v.append(v1[:])
                return 
        
            for i in range(st, A):
                v1.append(i+1)
                comb(A, B, i+1, v1)
                v1.pop()
            return v
        
        comb(A, B, 0, v1)
        return v
        """output = []
        temp = []
        def combine(n, k, pos, temp):
          
            if len(temp) == k:
                output.append(temp[:])
                return

            for i in range(pos, n):
                temp.append(i+1)
                combine(n, k, i+1, temp)
                temp.pop()
                
        combine(A, B, 0, temp)
        return output"""
_______________________________________________________________________Given_Solution___________________________________________________________
class Solution:
    # @param A : integer
    # @param B : integer
    # @return a list of list of integers
    def combine(self, n, k):
        master = []
        self.recurse([x for x in range(1, n + 1)], k, master, 0, "")
        return master

    def recurse(self, S, have, master, curr, buff):
        if have == 0:
            master.append([int(x) for x in buff.split()])
        elif curr < len(S) and have > 0:
            self.recurse(S, have - 1, master, curr + 1, buff + " " + str(S[curr]))
            self.recurse(S, have, master, curr + 1, buff)
--Java--
public class Solution {
    private ArrayList < ArrayList < Integer >> ans;
    public ArrayList < ArrayList < Integer >> combine(int A, int B) {
        ans = new ArrayList < > ();
        ArrayList < Integer > cur = new ArrayList < > ();
        solve(1, cur, A, B);
        return ans;
    }
    void solve(int idx, ArrayList < Integer > cur, int A, int B) {
        if (cur.size() == B) {
            ans.add(new ArrayList < > (cur));
            return;
        }
        if (idx == A + 1) 
            return;
        //Include current element
        cur.add(idx);
        solve(idx + 1, cur, A, B);
        cur.remove(cur.size() - 1);
        //Don't include current element
        solve(idx + 1, cur, A, B);
    }
}
_______________________________________________________________________Approach___________________________________________________________

For every element, you have 2 options. 

You may either include the element in your subset or you will not include the element in your subset.
Make the call for both the cases.

Maintain the 2D array to return the answer.

Make sure the return array contain the combinations in sorted order.