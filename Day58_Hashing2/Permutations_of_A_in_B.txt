
Permutations of A in B
Problem Description

You are given two strings A and B of size N and M respectively.

You have to find the count of all permutations of A present in B as a substring. You can assume a string will have only lowercase letters.



Problem Constraints
1 <= N < M <= 105



Input Format
Given two argument, A and B of type String.



Output Format
Return a single Integer, i.e number of permutations of A present in B as a substring.



Example Input
Input 1:

 A = "abc"
 B = "abcbacabc"
Input 2:

 A = "aca"
 B = "acaa"


Example Output
Output 1:

 5
Output 2:

 2


Example Explanation
Explanation 1:

 Permutations of A that are present in B as substring are:
    1. abc
    2. cba
    3. bac
    4. cab
    5. abc
    So ans is 5.
Explanation 2:

 Permutations of A that are present in B as substring are:
    1. aca
    2. caa 
_______________________________________________________________________Solution___________________________________________________________

class Solution:
    # @param A : string
    # @param B : string
    # @return an integer
    def solve(self, A, B):
        
        '''hMap = {}
        
        def perm(A, path, hMap):
            if not A:
                hMap[path] = 1
            for i in range(len(A)):
                perm(A[:i]+A[i+1:], path+A[i], hMap)
        
        perm(A, "", hMap)
        n = len(A)
        Count = 0
        for i in range(len(B)):
            for j in range(i, len(B)-n+1):
                if B[i:j+n] in hMap:
                    Count += 1
        return Count'''
        
        lisA = [0] * 26
        lisB = [0] * 26
        for char in A:
            lisA[ord(char)-ord('a')] += 1
        Count = 0    
        n = len(A)
        for i in range(n):
            lisB[ord(B[i])-ord('a')] += 1
        
        if lisA == lisB:
            Count += 1
        
        for i in range(n,len(B)):
            lisB[ord(B[i-n])-ord('a')] -= 1
            lisB[ord(B[i])-ord('a')] += 1
            if lisA == lisB:
                Count += 1
        
        return Count
        
        
_______________________________________________________________________Given_Solution___________________________________________________________
def same(hash1, hash2):
    for i in range(0, 26):
        if hash1[i] != hash2[i]:
            return 0  # not a permutation of A
    return 1  # got a permutation of A in G

class Solution:
    # @param A : string
    # @param B : string
    # @return an integer
    def solve(self, a, g):
        n = len(a)
        m = len(g)
        hash1 = [0] * 26
        hash2 = [0] * 26
        count = 0
        # count frequency of each char in A
        for i in range(0, n):
            hash1[ord(a[i]) - ord("a")] += 1
        # count frequency of each char in first window of size n in G
        for i in range(0, n):
            hash2[ord(g[i]) - ord("a")] += 1
        count += same(hash1, hash2)
        # move current window 1 step ahead
        j = 0
        for i in range(n, m,):
            hash2[ord(g[j]) - ord("a")] -= 1
            hash2[ord(g[i]) - ord("a")] += 1
            count += same(hash1, hash2)
            j += 1
        return count
        
#alternate solution

class Solution:
    # @param A : string
    # @param B : string
    # @return an integer
    def solve(self, a, g):
    
        n = len(a)
        m = len(g)
        hash1 = [0]*26
        hash2 = [0]*26
        count = 0
        diff = 0
    

        # count frequency of each char in A 
        for i in range(0, n):
            hash1[ord(a[i]) - ord('a')] += 1
        
        # count frequency of each char in first window of size n in G
        for i in range(0, n):
            hash2[ord(g[i]) - ord('a')] += 1
        
        for i in range(26):
            if hash1[i] != hash2[i]:
                diff += 1
        
        if diff == 0:
            count += 1
        
        # move current window 1 step ahead
        j = 0
        for i in range(n, m,):
            if hash2[ord(g[j]) - ord('a')] == hash1[ord(g[j]) - ord('a')]:
                diff += 1
            if hash2[ord(g[i]) - ord('a')] == hash1[ord(g[i]) - ord('a')]:
                diff += 1
            hash2[ord(g[j]) - ord('a')] -= 1
            hash2[ord(g[i]) - ord('a')] += 1
            if hash2[ord(g[j]) - ord('a')] == hash1[ord(g[j]) - ord('a')]:
                diff -= 1
            if hash2[ord(g[i]) - ord('a')] == hash1[ord(g[i]) - ord('a')]:
                diff -= 1
            if diff == 0:
                count += 1
            j += 1
    
        return count

--Java--
public class Solution {
    public int solve(String A, String B) {
        int n = A.length();
        int m = B.length();
        int hash1[] = new int[26];
        int hash2[] = new int[26];
        int count = 0;
        // count frequency of each char in A 
        for (int i = 0; i < n; i += 1) {
            hash1[A.charAt(i) - 'a'] += 1;
        }
        // count frequency of each char in first window of size n in G
        for (int i = 0; i < n; i += 1) {
            hash2[B.charAt(i) - 'a'] += 1;
        }
        count += same(hash1, hash2);
        // move current window 1 step ahead
        for (int i = n, j = 0; i < m; i += 1, j += 1) {
            hash2[B.charAt(j) - 'a'] -= 1;
            hash2[B.charAt(i) - 'a'] += 1;
            count += same(hash1, hash2);
        }
        return count;
    }

    public int same(int[] hash1, int[] hash2) {
        for (int i = 0; i < 26; i += 1) {
            if (hash1[i] != hash2[i])
                return 0; // not a permutation of A
        }
        return 1; // got a permutation of A in G
    }
}
_______________________________________________________________________Approach___________________________________________________________

This problem can be easily solved by Hashing and Sliding Window.

The main observation required to solve this problem is, every permutation of a string will have the same number of characters and the frequency of each character in every permutation will be same.

So first we can create a hash map of size 26 to count the frequency of each character in A.
After that, we can create another hash map of size 26 to count the frequency of each character in the first window of size N (length of A) in B, then slide through all windows and when both hashes will be same we can say we found a permutation of A in B as a substring.

Alternate Solution:
We can also keep track of how many alphabets have different frequencies in A and in windows of B. This way, we can solve the problem in O(N) instead of O(26 * N)