Compare Sorted Subarrays
Problem Description

Given an array A of length N. You have to answer Q queires.

Each query will contain 4 integers l1, r1, l2 and r2. If sorted segment from [l1, r1] is same as sorted segment from [l2 r2] then answer is 1 else 0.

NOTE The queries are 0-indexed.



Problem Constraints
0 <= A[i] <= 100000
1 <= N <= 100000
1 <= Q <= 100000



Input Format
First argument is an array A.
Second will be 2-D array B denoting queries with dimension Q * 4.
Consider ith query as l1 = B[i][0], r1 = B[i][1], l2 = A[i][2], r2 = B[i][3].



Output Format
Return an array of length Q with answer of the queries in the same order in input.



Example Input
Input 1:

 A = [1, 7, 11, 8, 11, 7, 1]
 B = [ 
       [0, 2, 4, 6]
     ]
Input 2:

 A = [1, 3, 2]
 B = [
       [0, 1, 1, 2]
     ] 


Example Output
Output 1:

 [1]
Output 2:

 [0]


Example Explanation
Explanation 1:

 (0, 2) -> [1, 7, 11]
 (4, 6) -> [11, 7, 1]
 Both are same when sorted hence 1.
Explanation 2:

 (0, 1) -> [1, 3]
 (1, 2) -> [3, 2] 
 Both are different when sorted hence -1.
 
_______________________________________________________________________Solution___________________________________________________________
class Solution:
	# @param A : list of integers
	# @param B : list of list of integers
	# @return a list of integers
	def solve(self, A, B):
	    '''ans = []
	    
	    for i in range(len(B)):
            l1 = B[i][0]
            r1 = B[i][1]
            l2 = B[i][2]
            r2 = B[i][3]
            
            #hMapA = [0] * 100002
            #hMapB = [0] * 100002
            hMapA = {}
            hMapB = {}
            for i in range(l1, r1+1):
                #hMapA[A[i]+1] += 1
                if A[i] in hMapA:
                    hMapA[A[i]] += 1
                else:
                    hMapA[A[i]] = 1
            
            for i in range(l2, r2+1):
                #hMapB[A[i]+1] += 1
                if A[i] in hMapB:
                    hMapB[A[i]] += 1
                else:
                    hMapB[A[i]] = 1
            
            if hMapA == hMapB:
                ans.append(1)
            else:
                ans.append(0)
        
        return ans'''
        
        ans = []
        preSum = [0, A[0] **(1/5)]
        for i in range(1, len(A)):
            preSum.append((preSum[-1] + (A[i]) ** (1/5)))
        #print(preSum)
        for i in range(len(B)):
            l1 = B[i][0]
            r1 = B[i][1]
            l2 = B[i][2]
            r2 = B[i][3]
            
            Sum1 = preSum[r1+1] - preSum[l1]
            Sum2 = preSum[r2+1] - preSum[l2]
            #print(Sum1)
            #print(Sum2)
            if round(Sum1, 6) == round(Sum2,6):
                ans.append(1)
            else:
                ans.append(0)
        
        return ans
_______________________________________________________________________Given_Solution___________________________________________________________
import random
N = 100000
INF = 1 << 46
Hash = {}
def rand46():  # generates 46bit random number
    ret = 0
    ret |= random.randint(0, INF)
    x = random.randint(0, INF)
    ret = ret | (x << 15)
    return ret

def set_hash(a):
    Hash.clear()
    n = len(a)
    for i in range(0, n):
        if Hash.get(a[i]) == None:  # consider multiple occurences
            Hash[a[i]] = rand46()

class Solution:
    # @param A : list of integers
    # @param B : list of list of integers
    # @return a list of integers
    def solve(self, a, lr):
        n = len(a)
        set_hash(a)
        psum = [0] * n
        psum[0] = Hash[a[0]]
        for i in range(1, n):
            psum[i] = psum[i - 1] + Hash[a[i]]
        q = len(lr)
        ans = [0] * q
        v1 = 0
        v2 = 0
        for i in range(0, q):
            if lr[i][0] > 0:
                v1 = psum[lr[i][1]] - (psum[lr[i][0] - 1])
            else:
                v1 = psum[lr[i][1]]
            if lr[i][2] > 0:
                v2 = psum[lr[i][3]] - (psum[lr[i][2] - 1])
            else:
                v2 = psum[lr[i][3]]
            if v1 == v2:
                ans[i] = 1
        return ans

--Java--
public class Solution {
    public ArrayList < Integer > solve(ArrayList < Integer > A, ArrayList < ArrayList < Integer >> B) {
        int n = A.size();
        Random rd = new Random();
        HashMap < Integer, Long > hm = new HashMap < > ();
        HashSet < Long > used = new HashSet < > ();
        long psum[] = new long[n + 1];
        for (int i = 0; i < n; i++) {
            if (!hm.containsKey(A.get(i))) {
                long hash = rd.nextLong();
                while (used.contains(hash)) {
                    hash = rd.nextLong();
                }
                hm.put(A.get(i), hash);
            }
            psum[i + 1] = psum[i] + hm.get(A.get(i));
        }
        ArrayList < Integer > ans = new ArrayList < Integer > ();
        for (ArrayList < Integer > tmp: B) {
            long val1 = psum[tmp.get(1) + 1] - psum[tmp.get(0)];
            long val2 = psum[tmp.get(3) + 1] - psum[tmp.get(2)];
            if (val1 == val2) {
                ans.add(1);
            } else {
                ans.add(0);
            }
        }
        return ans;
    }
}
_______________________________________________________________________Approach___________________________________________________________

If both sub-arrays are exactly same after sorting then their sum of values will be same. So, we can just find the sum in range [l1, r1] and sum in range[l2, r2]. If they are different then we are sure that ans is 0. But, if they equal then? Consider two sub-arrays [3 5] and [4 4]. Both have sum 8 but still they are different.

Actually above approach fails because input can be carefully chosen.

Now, still we can use same idea but let first assign each value a unique random label from very big range like from 0 to 10^13. Now, probability of failure will be very less that can be neglected with given constraints.

Note: Any solution with random hashing is not 100% correct, possibility of failure exists. But with wide range of numbers probability of failure will be too small.

Note: Make sure that you are assign same label to all the occurrences. If value 5 comes 3 times then each 3 occurrences should be assigned same random label. Make sure you are using appropriate data type. Also, choosing big range like from 0 to 10^15 can overflow long long int.