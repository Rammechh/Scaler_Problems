Count Rectangles
Problem Description

Given two arrays of integers A and B of size N each, where each pair (A[i], B[i]) for 0 <= i < N represents a unique point (x, y) in 2-D Cartesian plane.

Find and return the number of unordered quadruplet (i, j, k, l) such that (A[i], B[i]), (A[j], B[j]), (A[k], B[k]) and (A[l], B[l]) form a rectangle with the rectangle having all the sides parallel to either x-axis or y-axis.



Problem Constraints
1 <= N <= 2000
0 <= A[i], B[i] <= 109



Input Format
The first argument given is the integer array A.
The second argument given is the integer array B.



Output Format
Return the number of unordered quadruplet that form a rectangle.



Example Input
Input 1:

 A = [1, 1, 2, 2]
 B = [1, 2, 1, 2]
Input 1:

 A = [1, 1, 2, 2, 3, 3]
 B = [1, 2, 1, 2, 1, 2]


Example Output
Output 1:

 1
Output 2:

 3


Example Explanation
Explanation 1:

 All four given points make a rectangle. So, the answer is 1.
Explanation 2:

 3 quadruplets which make a rectangle are: (1, 1), (2, 1), (2, 2), (1, 2)
                                           (1, 1), (3, 1), (3, 2), (1, 2)
                                           (2, 1), (3, 1), (3, 2), (2, 2)
										   
_______________________________________________________________________Solution___________________________________________________________
from collections import defaultdict
class Solution:
    # @param A : list of integers
    # @param B : list of integers
    # @return an integer
    def solve(self, A, B):
        n = len(A)
        Count = 0
        Map = defaultdict(set)
        for i in range(n):
            Map[A[i]].add(B[i])
            
        for i in range(n-1):
            for j in range(i+1,n):
                if A[i]!=A[j] and B[i]!=B[j]:
                    if B[j] in Map[A[i]] and B[i] in Map[A[j]] :
                        Count += 1
        return Count//2
_______________________________________________________________________Given_Solution___________________________________________________________
class Solution:
    # @param A : list of integers
    # @param B : list of integers
    # @return an integer
    def solve(self, A, B):
        mp = {}
        ans = 0
        mul = 1000000000
        n = len(A)
        for i in range(0, n):
            mp[A[i] * mul + B[i]] = 1
        for i in range(0, n):
            for j in range(i + 1, n):
                if A[i] != A[j] and B[i] != B[j]:
                    if (
                        mp.get(A[i] * mul + B[j]) != None
                        and mp.get(mul * A[j] + B[i]) != None
                    ):
                        ans += 1
        return ans // 2
		
--Java---
public class Solution {
    public int solve(int[] a, int[] b) {
        int n = a.length;
        HashMap<Integer, HashSet<Integer>> mpx = new HashMap<>();
        HashSet<Integer> h;
        for (int i = 0; i < n; i++) {
            if (mpx.containsKey(a[i]))
                h = mpx.get(a[i]);
            else
                h = new HashSet<>();
            h.add(b[i]);
            mpx.put(a[i], h);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (a[i] == a[j] || b[i] == b[j])
                    continue;
                if (mpx.get(a[i]).contains(b[j]) && mpx.get(a[j]).contains(b[i]))
                    ans++;
            }
        }
        return ans >> 1;
    }
}
_______________________________________________________________________Approach___________________________________________________________
As mentioned in the hint, run two loops by fixing the two diagonally opposite ends of the rectangle.

We have fixed the one diagonal of the rectangle and two corner points, from this we can easily find the other two points of the rectangle.

Suppose we have two diagonally opposite points: (x1, y1) and (x2, y2). Then the other two points of the rectangle must be (x1, y2) and (x2, y1).

We just have to check if these two points (x1, y2) and (x2, y1) are given or not. If present increment the answer.

For every rectangle, we have incremented the answer twice because every rectangle has two diagonals. So, our real answer will be half of the answer obtained after running two loops.