
Anagrams
Problem Description

Given an array A of N strings, return all groups of strings that are anagrams.

Represent a group by a list of integers representing the index(1-based) in the original list. Look at the sample case for clarification.

NOTE: Anagram : a word, phrase, or name formed by rearranging the letters of another, such as 'spar', formed from 'rasp'.



Problem Constraints
1 <= N <= 104

1 <= |A[i]| <= 104

Each string consists only of lowercase characters.

Sum of length of all the strings doesn't exceed 107



Input Format
Single Argument A which is an array of strings.



Output Format
Return a two-dimensional array where each row describes a group.

Note:

Ordering of the result :
You should not change the relative ordering of the strings within the group suppose within a group containing A[i] and A[j], A[i] comes before A[j] if i < j.



Example Input
Input 1:

 A = [cat, dog, god, tca]
Input 2:

 A = [rat, tar, art]


Example Output
Output 1:

 [ [1, 4],
   [2, 3] ]
Output 2:

 [ [1, 2, 3] ]


Example Explanation
Explanation 1:

 "cat" and "tca" are anagrams which correspond to index 1 and 4 and "dog" and "god" are another set of anagrams which correspond to index 2 and 3.
 The indices are 1 based ( the first element has index 1 instead of index 0).
Explanation 2:

 All three strings are anagrams.
_______________________________________________________________________Solution___________________________________________________________
class Solution:
	# @param A : tuple of strings
	# @return a list of list of integers
	def anagrams(self, A):
        hMap = {}
        Count = 0
        for words in A:
            Count += 1
            freq = [0] * 26
            for char in words:
                freq[ord(char)-ord('a')] += 1
            if str(freq) in hMap:
                hMap[str(freq)].append(Count)
            else:
                hMap[str(freq)] = [Count]
        
        return list(hMap.values())
_______________________________________________________________________Given_Solution___________________________________________________________
class Solution:
    # @param A : tuple of strings
    # @return a list of list of integers
    def anagrams(self, A):
        # hashmap with sorted string as key and list of anagrams as values
        hashmap = {}
        for index, word in enumerate(A):
            # sorted() returns a list, hence first convert it to a string
            # so that we can use it as a key in the hashmap
            sorted_word = "".join(sorted(word))
            if sorted_word not in hashmap:
                # create key if not present and associate the current word with it
                hashmap[sorted_word] = [index + 1]
            else:
                # append the current word to the list associated with the key
                hashmap[sorted_word] += [index + 1]
        # hashmap.values() returns a dict_values object in python 3,
        # hence convert it into a list while returning
        return list(hashmap.values())
--Java--
public class Solution {
    public ArrayList < ArrayList < Integer >> anagrams(final List < String > A) {
        ArrayList < ArrayList < Integer >> res = new ArrayList < > ();
        HashMap < String, ArrayList < Integer >> hashMap = new HashMap < > ();
        int i = 1;
        for (String str: A) {
            char[] array = str.toCharArray();
            Arrays.sort(array);
            String sorted = new String(array);
            if (hashMap.containsKey(sorted)) {
                ArrayList < Integer > list = hashMap.get(sorted);
                list.add(i);
            } else {
                ArrayList < Integer > list = new ArrayList < > ();
                list.add(i);
                hashMap.put(sorted, list);
            }
            i++;
        }
        for (Map.Entry < String, ArrayList < Integer >> entrySet: hashMap.entrySet()) {
            res.add(entrySet.getValue());
        }
        return res;
    }
}
_______________________________________________________________________Approach___________________________________________________________
Anagrams will map to the same string if the characters in the string are sorted.
We can maintain a hashmap with the key being the sorted string and the value being the list of strings ( which have the sorted characters as key ).