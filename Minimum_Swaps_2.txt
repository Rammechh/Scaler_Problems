Minimum Swaps 2
Problem Description

Given an array of integers A of size N that is a permutation of [0, 1, 2, ..., (N-1)]. It is allowed to swap any two elements (not necessarily consecutive).

Find the minimum number of swaps required to sort the array in ascending order.



Problem Constraints
1 <= N <= 100000
0 <= A[i] < N



Input Format
The only argument given is the integer array A.



Output Format
Return the minimum number of swaps.



Example Input
Input 1:

A = [1, 2, 3, 4, 0]
Input 2:

A = [2, 0, 1, 3]


Example Output
Output 1:

4
Output 2:

2


Example Explanation
Explanation 1:

 If you swap (1, 2) -> (2, 3) -> (4, 0) -> (3, 0). You will get a sorted array.
 You cannot sort it with lesser swaps.
Explanation 2:

 You cannot sort it with lesser than 2 swaps.
 
________________________________________________________Approach____________________________________________________________

Suppose we have array A=[A0, A1, A2â€¦ ]

Now, lets keep iterating over this array and if Ai != i, We swap it with index Ai (thats where Ai belongs), If you work it out you can see always some cycle will form.

Example:

[4, 0, 1, 3, 2]
swap_index(0,4) -> swap_index(0,2) -> swap_index(0,1) (3 swaps)
[2, 0, 1, 4, 3]
swap_index(0,2) -> swap_index(0,1) (2 swaps)
swap_index(3,4) (1 swaps)
Answers would be sum of { individual length of cycle - 1}

Rememeber to use some flags to not visit same elements again and again
 
________________________________________________________Solution____________________________________________________________

class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        n = len(A)
        swaps = 0

        for i in range(0, n - 1):
            while A[i] != i :
                A[A[i]], A[i] = A[i], A[A[i]]
                swaps += 1

        return(swaps)
________________________________________________________Given_Solution____________________________________________________________

class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        ans = 0;
        for i in range(0, len(A)):
            while A[i] != i:
                ans+=1
                t = A[A[i]]
                A[A[i]] = A[i]
                A[i] = t
        return ans
