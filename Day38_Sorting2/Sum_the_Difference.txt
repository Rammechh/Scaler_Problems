Sum the Difference
Problem Description

Given an integer array A of size N.
You have to find all possible non-empty subsequence of the array of numbers and then, for each subsequence, find the difference between the largest and smallest numbers in that subsequence Then add up all the differences to get the number.

As the number may be large, output the number modulo 1e9 + 7 (1000000007).

NOTE: Subsequence can be non-contiguous.



Problem Constraints
1 <= N <= 10000

1<= A[i] <=1000



Input Format
First argument is an integer array A.



Output Format
Return an integer denoting the output.



Example Input
Input 1:

A = [1, 2]
Input 2:

A = [1]


Example Output
Output 1:

 1
Output 2:

 0


Example Explanation
Explanation 1:

All possible non-empty subsets are:
[1]    largest-smallest = 1 - 1 = 0
[2]    largest-smallest = 2 - 2 = 0
[1 2]  largest-smallest = 2 - 1 = 1
Sum of the differences = 0 + 0 + 1 = 1
So, the resultant number is 1
Explanation 2:

 Only 1 subsequence of 1 element is formed.

_________________________________________________________Solution___________________________________________


class Solution:
	# @param A : list of integers
	# @return an integer
	def solve(self, A):
	    
	    MOD = 1000000007
        A.sort()
        n = len(A)
        # iterate over array and with help of
        # horner's rule calc max_sum and min_sum
        
        # TC of gen subset is 2^n
        # So A1 as occur 2^0 * a1 + 2^1 *a2 -> the max value occurs many times in subsets (maxsum)
        # 2^(n-1) * a1 + 2(n-2) *a2 ... -> suppose 1 occurs in many subsets (min sum)
        
        min_sum = 0
        max_sum = 0
        for i in range(0,n):
            max_sum += ((2 ** i) * A[i])
            max_sum %= MOD;
            min_sum += (2 ** (n-1-i) * A[i])
            min_sum %= MOD;
			
			
            """max_sum = 2 * max_sum + A[n-1-i];
            max_sum %= MOD;
            min_sum = 2 * min_sum + A[i];
            min_sum %= MOD;"""
     
        return (max_sum - min_sum + MOD) % MOD;
		
________________________________________________________Given_Solution___________________________________________

class Solution:
	# @param A : list of integers
	# @return an integer
	def solve(self, A):
	    mod = 1e9+7
        _max = 0
        _min = 0
        n = len(A)
        A.sort()
        for i in range(n):
            _min = (_min * 2) %mod
            _min += A[i]
            _min %= mod
        for i in range(n - 1, -1, -1):
            _max = (_max * 2)
            _max += A[i]
            _max %= mod
        ans= _max - _min + mod
        ans %= mod
        return int(ans)
		
		
________________________________________________________Approach___________________________________________

It can be seen that if elements are sorted then taking any two indexes,
there will be fixed number of K elements in between then.
So you can take any number of K elements which are in between those two elemets.
So the difference of the values of those two indexes will contribute 2 to the power of K (subsets) to the answer.
So we will take all possible pairs of elements.

Example:
1 2 3 4
If we take indexes 0 and 3 ie elements 1 and 4. There are 2 elements between them (2, 3).
So 1 and 4 are be in 4 subsets which are
a) 1 4
b) 1 2 4
c) 1 3 4
d) 1 2 3 4
Which is 2 to the power of 2.
The complexity if O(N^2)

If we take close look at the approach above,
we can solve it in O(N) also.
After sorting the array,
Answer is {A[N-1]2^(N-1) +A[N-2]2^(N-2) +…..+A[0]2^0} - {A[0]2^(N-1) + A[1]2^(N-2) +……+ A[0]2^0}
        