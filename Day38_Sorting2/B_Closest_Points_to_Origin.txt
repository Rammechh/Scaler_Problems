B Closest Points to Origin
Problem Description

We have a list A, of points(x,y) on the plane. Find the B closest points to the origin (0, 0).

Here, the distance between two points on a plane is the Euclidean distance.

You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in.)

NOTE: Euclidean distance between two points P1(x1,y1) and P2(x2,y2) is sqrt( (x1-x2)2 + (y1-y2)2 ).



Problem Constraints
1 <= B <= length of the list A <= 100000
-100000 <= A[i][0] <= 100000
-100000 <= A[i][1] <= 100000



Input Format
The argument given is list A and an integer B.



Output Format
Return the B closest points to the origin (0, 0) in any order.



Example Input
Input 1:

 A = [ 
       [1, 3],
       [-2, 2] 
     ]
 B = 1
Input 2:

 A = [
       [1, -1],
       [2, -1]
     ] 
 B = 1


Example Output
Output 1:

 [ [-2, 2] ]
Output 2:

 [ [1, -1] ]


Example Explanation
Explanation 1:

 The Euclidean distance will be sqrt(10) for point [1,3] and sqrt(8) for point [-2,2].
 So one closest point will be [-2,2].
Explanation 2:

 The Euclidean distance will be sqrt(2) for point [1,-1] and sqrt(5) for point [2,-1].
 So one closest point will be [1,-1].
 
_______________________________________________________________________Solution___________________________________________________________
 
class Solution:
    # @param A : list of list of integers
    # @param B : integer
    # @return a list of list of integers
    def solve(self, A, B):
        
        # To find B closest points in array using formula sqrt(a^2 + b^2)
        
        # created list to store [distance value (cal), index of A]
        close = []
        
        for i in range(len(A)):
            cal = (A[i][0] ** 2 + A[i][1] ** 2) ** (1/2)
            close.append([cal,i])
        
        # ans to return the required points in order
        ans = []
        # cnt to chk w B no of values
        cnt = 0
        
        # sorting according to distance value in close 
        for i in sorted(close, key = lambda close: close[0]):
            if cnt >= B:
                break
            ans.append(A[i[1]])
            cnt += 1
            
        return ans
		
_______________________________________________________________________Given_Solution___________________________________________________________

import heapq

class Solution:
    # @param A : list of list of integers
    # @param B : integer
    # @return a list of list of integers
    def solve(self, A, B):
        n = len(A)
        li = []
        for i in range(n):
            li.append([A[i][0] * A[i][0] + A[i][1] * A[i][1], i])
        heapq.heapify(li)
        ans = []
        for i in range(B):
            temp = heapq.heappop(li)
            ans.append(A[temp[1]])
        return ans