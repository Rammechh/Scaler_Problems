
Matrix and Absolute Difference
Problem Description

Given a matrix C of integers, of dimension A x B.

For any given K, you are not allowed to travel between cells that have an absolute difference greater than K.

Return the minimum value of K such that it is possible to travel between any pair of cells in the grid through a path of adjacent cells.

NOTE:

Adjacent cells are those cells that share a side with the current cell.


Problem Constraints
1 <= A, B <= 102

1 <= C[i][j] <= 109



Input Format
The first argument given is A.

The second argument give is B.

The third argument given is the integer matrix C.



Output Format
Return a single integer, the minimum value of K.



Example Input
Input 1:

 A = 3
 B = 3
 C = [  [1, 5, 6]
        [10, 7, 2]
        [3, 6, 9]   ]


Example Output
Output 1:

 4


Example Explanation
Explanation 1:

 
 It is possible to travel between any pair of cells through a path of adjacent cells that do not have an absolute
 difference in value greater than 4. e.g. : A path from (0, 0) to (2, 2) may look like this:
 => (0, 0) -> (0, 1) -> (1, 1) -> (2, 1) -> (2, 2)
_______________________________________________________________________Solution___________________________________________________________
import heapq
class Solution:
    # @param A : integer
    # @param B : integer
    # @param C : list of list of integers
    # @return an integer
    def solve(self, A, B, C):
        #BFS
        def prims():
            h = []
            heapq.heappush(h, (0, 0))
            visited = set()
            ans = 0
            while h:
                w, node = heapq.heappop(h)
                if node in visited:
                    continue
                visited.add(node)
                ans = max(ans, w)
                
                for nw,nNode in g[node]:
                    if nNode not in visited:
                        heapq.heappush(h, (nw, nNode))
            return ans
        
        g = [[] for _ in range(10009)]
        for i in range(A):
            for j in range(B):
                u = i*B+j
                if (i+1 < A):
                    v = (i+1) * B + j
                    w = abs(C[i][j] - C[i+1][j])
                    g[u].append((w, v))
                    g[v].append((w, u))
                
                if (j+1<B):
                    v = i*B + (j+1)
                    w = abs(C[i][j] - C[i][j+1])
                    g[u].append((w, v))
                    g[v].append((w, u))
                    
        return prims()

'''import heapq
class Solution:
    # @param A : integer
    # @param B : integer
    # @param C : list of list of integers
    # @return an integer
    def solve(self, A, B, C):
        h = []
        heapq.heappush(h, (0,0,0))
        visited = set()
        ans = 0
        cnt = 0
        
        def isvalid(x, y, s):
            if x<0 or y<0 or x>= len(C) or y >= len(C[0]) or (x*B+y) in visited:
                return
            heapq.heappush(h, (abs(C[x][y]- s), x, y))
        #DFS
        def insert(x, y):
            isvalid(x-1, y, C[x][y])
            isvalid(x+1, y, C[x][y])
            isvalid(x, y-1, C[x][y])
            isvalid(x, y+1, C[x][y])
        
        while h and cnt < A*B:
            ele, x, y = heapq.heappop(h)
            ans = max(ans, ele)
            ind = x * B + y
            if ind in visited:
                continue
            cnt += 1
            visited.add(ind)
            insert(x, y)
        return ans'''
      
_______________________________________________________________________Given_Solution___________________________________________________________
from heapq import heappush,heappop
g = []
def prims():
    global g
    cost = 0
    visited = [0] * (10009)
    pq = []
    heappush(pq, [0, 0])
    while(len(pq) != 0):
        temp = heappop(pq)
        v = temp[1]
        if(visited[v] == 1):
            continue
        visited[v] = 1
        cost = max(cost, temp[0])
        for u in g[v]:
            if(visited[u[1]] == 0):
                heappush(pq, [u[0], u[1]])
    return cost
class Solution:
    # @param A : integer
    # @param B : integer
    # @param C : list of list of integers
    # @return an integer
    def solve(self, A, B, C):
        global g
	    g=[[] for i in range(10009)]
	    for i in range(A):
	        for j in range(B):
	            u = i * B + j
	            if(i + 1 < A):
	                v = (i + 1) * B + j
	                w = abs(C[i][j] - C[i + 1][j])
	                g[u].append((w ,v))
	                g[v].append((w ,u))
	            if(j + 1 < B):
	                v = i * B + (j + 1)
	                w = abs(C[i][j] - C[i][j + 1])
	                g[u].append((w, v))
	                g[v].append((w, u))
	    return prims()

--Java--
public class Solution {
    static int maxn = 10009;
    static ArrayList < ArrayList < Pair > > adj;
    static int[] visited = new int[maxn];
    public int solve(int A, int B, int[][] C) {
        adj = new ArrayList < ArrayList < Pair > > (maxn);
        for (int i = 0; i < maxn; i++) {
            adj.add(new ArrayList < Pair > ());
            visited[i] = 0;
        }
        for (int i = 0; i < A; i++) {
            for (int j = 0; j < B; j++) {
                int u = i * B + j;
                if (i + 1 < A) {
                    int v = (i + 1) * B + j;
                    int w = Math.abs(C[i][j] - C[i + 1][j]);
                    adj.get(u).add(new Pair(v, w));
                    adj.get(v).add(new Pair(u, w));
                }
                if (j + 1 < B) {
                    int v = i * B + (j + 1);
                    int w = Math.abs(C[i][j] - C[i][j + 1]);
                    adj.get(u).add(new Pair(v, w));
                    adj.get(v).add(new Pair(u, w));
                }
            }
        }
        return prims();
    }
    public static int prims() {
        PriorityQueue < Pair > pq = new PriorityQueue < Pair > (new CustomComp());
        pq.offer(new Pair(0, 0));
        int maxe = 0;
        while (pq.size() > 0) {
            Pair temp = pq.poll();
            if (visited[temp.b] > 0) continue;
            visited[temp.b] = 1;
            maxe = Math.max(maxe, temp.a);
            for (Pair p: adj.get(temp.b)) {
                if (visited[p.a] > 0) continue;
                pq.offer(new Pair(p.b, p.a));
            }
        }
        return maxe;
    }
}
class Pair {
    int a;
    int b;
    public Pair(int c, int d) {
        this.a = c;
        this.b = d;
    }
}
class CustomComp implements Comparator < Pair > {
    @Override
    public int compare(Pair aa, Pair b) {
        return aa.a - b.a;
    }
}
_______________________________________________________________________Approach___________________________________________________________
Think of matrix as a graph with A*B nodes and Each node has an edge to its four neighbouring cells with weight as absolute difference of values between them.

Apply any MST algorithm on it and find the maximum weighted edge in that MST.

Why we have to apply MST?
Because in MST we always consider smallest weighted edge as to minimize the total cost so just find mst and find the maximum weighted edge in that MST.

You can use any of Kruskal or Prims Implementation of MST to solve this question.
You can use any of Kruskal or Prims Implementation of MST to solve this question.