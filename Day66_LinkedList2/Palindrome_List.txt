Palindrome List
Problem Description

Given a singly linked list A, determine if its a palindrome. Return 1 or 0 denoting if its a palindrome or not, respectively.



Problem Constraints
1 <= |A| <= 105



Input Format
The first and the only argument of input contains a pointer to the head of the given linked list.



Output Format
Return 0, if the linked list is not a palindrome.

Return 1, if the linked list is a palindrome.



Example Input
Input 1:

A = [1, 2, 2, 1]
Input 2:

A = [1, 3, 2]


Example Output
Output 1:

 1 
Output 2:

 0 


Example Explanation
Explanation 1:

 The first linked list is a palindrome as [1, 2, 2, 1] is equal to its reversed form.
Explanation 2:

 The second linked list is not a palindrom as [1, 3, 2] is not equal to [2, 3, 1].
 
_______________________________________________________________________Solution___________________________________________________________
# Definition for singly-linked list.
# class ListNode:
#	def __init__(self, x):
#		self.val = x
#		self.next = None

class Solution:
	# @param A : head node of linked list
	# @return an integer
	def lPalin(self, A):
        slow = fast = A
        
        # find mid node
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        
        #reverse seconde half
        node = None
        while slow:
            nxt = slow.next
            slow.next = node
            node = slow
            slow = nxt
        
        #Compare first and second half 
        while node:
            if A.val != node.val:
                return 0
            A = A.next
            node = node.next
            
        return 1
_______________________________________________________________________Given_Solution___________________________________________________________
class Solution:
    # @param A : head node of linked list
    # @return an integer
    def lPalin(self, head):
        count = 0
        lead = head

        # count the number of nodes
        while lead != None:
            count += 1
            lead = lead.next
        if count <= 1:
            return 1
        lead = head
        head = head.next
        if count == 2:
            if head.val == lead.val:
                return 1
            else:
                return 0
        elif count == 3:
            if head.next.val == lead.val:
                return 1
            else:
                return 0
        i = 1
        while i < (count // 2):
            temp = head.next
            head.next = lead
            lead = head
            head = temp
            i += 1

        # if the number of nodes are odd, then skip the node at the middle and compare node on both sides
        if count % 2 == 1:
            head = head.next
        while head != None:
            if head.val != lead.val:
                return 0
            head = head.next
            lead = lead.next

        return 1

--Java--
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public int lPalin(ListNode A) {
        ListNode slow_ptr = A, fast_ptr = A;
        ListNode second_half, prev_of_slow_ptr = A;
        ListNode midnode = null; // To handle odd size list
        int res = 1; // initialize result
        if (A != null && A.next != null) {
            /* Get the middle of the list. Move slow_ptr by 1
               and fast_ptrr by 2, slow_ptr will have the middle
               ListNode */
            while (fast_ptr != null && fast_ptr.next != null) {
                fast_ptr = fast_ptr.next.next;

                /*We need previous of the slow_ptr for
                  linked lists  with odd elements */
                prev_of_slow_ptr = slow_ptr;
                slow_ptr = slow_ptr.next;
            }
            /* fast_ptr would become NULL when there are even elements in list. 
               And not NULL for odd elements. We need to skip the middle ListNode 
               for odd case and store it somewhere so that we can restore the
               original list*/
            if (fast_ptr != null) {
                midnode = slow_ptr;
                slow_ptr = slow_ptr.next;
            }
            // Now reverse the second half and compare it with first half
            second_half = slow_ptr;
            prev_of_slow_ptr.next = null; // NULL terminate first half
            second_half = reverse(second_half); // Reverse the second half
            res = compareLists(A, second_half); // compare
        }
        return res;
    }
    public ListNode reverse(ListNode head_ref) {
        ListNode prev = null;
        ListNode current = head_ref;
        ListNode next;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }

    /* Function to check if two input lists have same val*/
    int compareLists(ListNode head1, ListNode head2) {
        ListNode temp1 = head1;
        ListNode temp2 = head2;
        while (temp1 != null && temp2 != null) {
            if (temp1.val == temp2.val) {
                temp1 = temp1.next;
                temp2 = temp2.next;
            } else return 0;
        }
        /* Both are empty reurn 1*/
        if (temp1 == null && temp2 == null)
            return 1;
        /* Will reach here when one is NULL
           and other is not */
        return 0;
    }
}
_______________________________________________________________________Approach___________________________________________________________
To check palindrome, we just have to reverse latter half of linked list and then we can in (n/2) steps total can compare if all elements are same or not.
For finding mid point, first we can in O(N) traverse whole list and calculate total number of elements.
Reversing is again O(N).