Add Two Numbers as Lists
Problem Description

You are given two linked lists, A and B representing two non-negative numbers.

The digits are stored in reverse order and each of their nodes contain a single digit.

Add the two numbers and return it as a linked list.



Problem Constraints
1 <= |A|, |B| <= 105



Input Format
The first argument of input contains a pointer to the head of linked list A.

The second argument of input contains a pointer to the head of linked list B.



Output Format
Return a pointer to the head of the required linked list.



Example Input
Input 1:

 
 A = [2, 4, 3]
 B = [5, 6, 4]
Input 2:

 
 A = [9, 9]
 B = [1]


Example Output
Output 1:

 
 [7, 0, 8]
Output 2:

 
 [0, 0, 1]


Example Explanation
Explanation 1:

 A = 342 and B = 465. A + B = 807. 
Explanation 2:

 A = 99 and B = 1. A + B = 100. 

_______________________________________________________________________Solution___________________________________________________________
# Definition for singly-linked list.
# class ListNode:
#	def __init__(self, x):
#		self.val = x
#		self.next = None

class Solution:
	# @param A : head node of linked list
	# @param B : head node of linked list
	# @return the head node in the linked list
	def addTwoNumbers(self, A, B):
        head = ans = ListNode(0)
        c = 0
        while A or B or c:
            A1 = A.val if A else 0
            B1 = B.val if B else 0
            
            Sum = A1 + B1 + c
            c = Sum // 10
            ans.next = ListNode(Sum%10)
            A = A.next if A else None
            B = B.next if B else None
            ans = ans.next
            
        return head.next
_______________________________________________________________________Given_Solution___________________________________________________________
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # @param A : head node of linked list
    # @param B : head node of linked list
    # @return the head node in the linked list
    def addTwoNumbers(self, A, B):
        a, b = A, B
        head = ListNode(0)
        cur_sum = head
        while a != None or b != None or cur_sum.val > 9:
            carry = cur_sum.val // 10
            cur_sum.val %= 10
            a_val = 0 if a == None else a.val
            b_val = 0 if b == None else b.val
            next_val = a_val + b_val + carry
            cur_sum.next = ListNode(next_val)
            cur_sum = cur_sum.next
            a = None if a == None else a.next
            b = None if b == None else b.next
        return head.next
		
--Java--
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode A, ListNode B) {
        ListNode node;
        ListNode prev = null;
        ListNode first = null;
        int carry = 0;
        int sum = 0;
        while (A != null || B != null || carry != 0) {
            node = new ListNode(0);
            sum = carry;
            if (first == null)
                first = node;
            if (prev != null)
                prev.next = node;
            if (A != null) {
                sum += A.val;
                A = A.next;
            }
            if (B != null) {
                sum += B.val;
                B = B.next;
            }
            node.val = sum % 10;
            sum /= 10;
            carry = sum;
            prev = node;
        }
        return first;
    }
}
_______________________________________________________________________Approach___________________________________________________________
This problem can be solved exactly like the naive addition is done, using the temporary sum and implementing a value that represent a carry over.
Although, you can consider that there are two edge cases to it:

1) The first list can be shorter than the second list. How will you solve a problem like that?
2) It is possible that the answer has more digits than both the given integers. How to handle a case like this?