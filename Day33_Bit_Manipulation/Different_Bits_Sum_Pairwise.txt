Different Bits Sum Pairwise
Problem Description

We define f(X, Y) as number of different corresponding bits in binary representation of X and Y.
For example, f(2, 7) = 2, since binary representation of 2 and 7 are 010 and 111, respectively. The first and the third bit differ, so f(2, 7) = 2.

You are given an array of N positive integers, A1, A2 ,..., AN. Find sum of f(Ai, Aj) for all pairs (i, j) such that 1 ≤ i, j ≤ N. Return the answer modulo 109+7.



Problem Constraints
1 <= N <= 105

1 <= A[i] <= 231 - 1



Input Format
First and only argument of input contains a single integer array A.



Output Format
Return a single integer denoting the sum.



Example Input
Input 1:

 A = [1, 3, 5]
Input 2:

 A = [2, 3]


Example Output
Ouptut 1:

 8
Output 2:

 2


Example Explanation
Explanation 1:

 f(1, 1) + f(1, 3) + f(1, 5) + f(3, 1) + f(3, 3) + f(3, 5) + f(5, 1) + f(5, 3) + f(5, 5) 
 = 0 + 1 + 1 + 1 + 0 + 2 + 1 + 2 + 0 = 8
Explanation 2:

 f(2, 2) + f(2, 3) + f(3, 2) + f(3, 3) = 0 + 1 + 1 + 0 = 2
 
_______________________________________________________Solution___________________________________________________________________

class Solution:
	# @param A : list of integers
	# @return an integer
	def cntBits(self, A):
	    
	    #Optimised
	    
	    """ 1st bit count using (1 << i) 001 and 1 -> 001 so, it gives 1 increase count by 1 same for all number j loop
	    
	    ans += 1s count w 0s count  -> since in all pairs we need compare w each other numbers suppose 2 0's with 3 1's -> 3 * 2 = 6 len(A) - 1s count gives 0's count
	    multiply 0's and 1's count and mul by 2 since (Ai, Aj) pair equal to (Aj, Ai) pair 
	    Therafore ans += 2 * 1st count + 0s count
	    
	    next i loop for 2nd bit => (1 << 2) it becomes 2 -> 010 and compare w 2nd LSB of numbers follow same for all numbers j loop"""
	    
	    
        ans = 0
        for i in range(32):
            Count = 0
            for j in range(len(A)):
                if (A[j] & (1 << i)):
                    Count += 1
            ans += 2 * (Count * (len(A) - Count))
            ans %= 1000000007
        return ans
		
_______________________________________________________Given_Solution___________________________________________________________________

class Solution:
    # @param A : list of integers
    # @return an integer
    def cntBits(self, A):
        ans = 0
        if(len(A) > 100000):
            return -1
        for b in range(31):
            c0, c1 = 0, 0
            for i in A:
                if i & (1 << b):
                    c1 += 1
                else:
                    c0 += 1
            ans += 2 * c1 * c0
            ans %= (1000000007)
        return ans
		
_______________________________________________________Approach___________________________________________________________________

Assume that all values in input have only 1 bit i.e. Ai = 0 or 1.
Lets say A = count of elements which are 0
and B = count of elements which are 1

In this case our answer is just 2 * A * B, since each such pair contributes 1 to answer.

Can you combine this logic if we have multiple bits?

Note that all bits are independent in counting, since we are counting number of bits which are different in each pair.
So, we just do the same process for all different bits. Since Ai is an integer, we just have to do this for 31 different bits, so our solution is O(31*N).