Strange Equality
Problem Description

Given an integer A.
Two numbers X and Y are defined as follows:

X is the greatest number smaller than A such that XOR sum of X and A is the same as the sum of X and A.
Y is the smallest number greater than A such that XOR sum of Y and A is the same as the sum of Y and A.
Find and return the XOR of X and Y.

NOTE 1: XOR of X and Y is defined as X ^ Y where '^' is the BITWISE XOR operator.

NOTE 2: Your code will be run against a maximum of 100000 Test Cases.



Problem Constraints
1 <= A <= 109



Input Format
First and only argument is an integer A.



Output Format
Return an integer denoting the XOR of X and Y.



Example Input
A = 5


Example Output
10


Example Explanation
The value of X will be 2 and the value of Y will be 8. The XOR of 2 and 8 is 10.


_______________________________________________________________________Solution___________________________________________________________
class Solution:
    # @param A : integer
    # @return an integer
    def solve(self, A):
        # (A+B) = (A^B) + 2 * (A&B)
        # in this case A& B shd be zero since in que A+B must equal to A^B
        # to make A&B zero -> the set bit in A must be unset in B 
        # for ex A=5 101 B must be 010 (Min value found)
        # Max value will be the max power of 2 for A=5 101 (2 ** 3 = 8)
        # Max ^ Min gives ans
        i = 0
        Count = 0
        Min = 0
        Max = 0

        while A > 0:
            
            if A & 1 == 0:
                Min += (2 ** i)
            Count += 1
            A = A >> 1
            i +=1
        
        Max = 2 ** Count
        
        return (Max^ Min)
_______________________________________________________________________Given_Solution___________________________________________________________

class Solution:
    def solve(self, A):
        bit = int(math.log(A, 2)) + 1
        x = 0
        for i in range(0, bit):
            if A & (1 << i):
                continue
            else:
                x += 1 << i
        y = 1 << bit
        ans = x ^ y
        return ans
_______________________________________________________________________Approach___________________________________________________________

Following from the above equation, if xor sum and sum of 2 numbers are to be equal, then their bitwise AND should be zero.
Given a number N, how to find a number whose bitwise AND with N is 0?
Keeping in mind the truth table of AND, 1&1=1 while 1&0=0, 0&1=0 and 0&0=0.
Therefore, in the number X such that X&N is 0, all the set bits of number N must be unset in the number X since 1&0=0.
The unset bits of N can have any orientation in X, that is they can either be 0 or be 1.
So to find the smallest number greater than N, the answer is the next power of 2 greater than N. Think why!!
And to find the greatest number smaller than N, set all the unset bits of N to 1.