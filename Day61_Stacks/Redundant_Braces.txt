
Redundant Braces
Problem Description

Given a string A denoting an expression. It contains the following operators '+', '-', '*', '/'.

Chech whether A has redundant braces or not.

NOTE: A will be always a valid expression.



Problem Constraints
1 <= |A| <= 105



Input Format
The only argument given is string A.



Output Format
Return 1 if A has redundant braces, else return 0.



Example Input
Input 1:

 A = "((a+b))"
Input 2:

 A = "(a+(a+b))"


Example Output
Output 1:

 1
Output 2:

 0


Example Explanation
Explanation 1:

 ((a+b)) has redundant braces so answer will be 1.
Explanation 2:

 (a+(a+b)) doesn't have have any redundant braces so answer will be 0.
_______________________________________________________________________Solution___________________________________________________________
class Solution:
	# @param A : string
	# @return an integer
	def braces(self, A):
        stack = []
        
        for c in A:
            if c == '(' or c == '+' or c == '-' or c == '*' or c == '/':
                stack.append(c)
            elif c == ')':
                if stack and stack[-1] == '(':
                    return 1
                else:
                    if stack:
                        stack.pop()
                    if stack:
                        stack.pop()
        return 0
_______________________________________________________________________Given_Solution___________________________________________________________
class Solution:
    # @param A : string
    # @return an integer
    def braces(self, A):
        #print A
        A = A.strip()
        stack = []
        for c in A:
            if c == ')':
                noChars = 0
                temp = stack.pop()
                while temp != '(':
                    noChars += 1
                    temp = stack.pop()
                if noChars <= 1:
                    return 1
            else:
                stack.append(c)
        return 0
		
--Java--
public class Solution {

  boolean isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/';
  }

  public int braces(String A) {
    char s[] = A.toCharArray();
    int n = s.length;
    Stack < Character > st = new Stack < > ();
    for (char c: s) {
      if (c == '(') {
        st.push(c);
      } else if (c == ')') {
        char top = st.peek();
        if (!isOperator(top)) return 1;
        while (isOperator(st.peek())) st.pop();
        if (st.peek() != '(') return 1;
        st.pop();
      } else if (isOperator(c)) {
        st.push(c);
      }
    }
    while (!st.isEmpty() && isOperator(st.peek())) st.pop();
    return st.isEmpty() ? 0 : 1;
  }
}
_______________________________________________________________________Approach___________________________________________________________
If we somehow pick out sub-expressions surrounded by ( and ), then if we are left with () as a part of the string, we know we have redundant braces.

Lets take an example:

(a+(a+b))

We keep pushing elements onto the stack till we encounter ')'. When we do encounter ')', we start popping elements till we find a matching '('. 
If the number of elements popped do not correspond to '()', we are fine and we can move forward. 
Otherwise, voila! Matching braces have been found. 