Balanced Paranthesis
Problem Description

Given an expression string A, examine whether the pairs and the orders of “{“,”}”, ”(“,”)”, ”[“,”]” are correct in A.

Refer to the examples for more clarity.



Problem Constraints
1 <= |A| <= 100



Input Format
The first and the only argument of input contains the string A having the paranthesis sequence.



Output Format
Return 0, if the paranthesis sequence is not balanced.

Return 1, if the paranthesis sequence is balanced.



Example Input
Input 1:

 A = {([])}
Input 2:

 A = (){
Input 3:

 A = ()[] 


Example Output
Output 1:

 1 
Output 2:

 0 
Output 3:

 1 


Example Explanation
You can clearly see that the first and third case contain valid paranthesis.

In the second case, there is no closing bracket for {, thus the paranthesis sequence is invalid.

_______________________________________________________________________Solution___________________________________________________________
class Solution:
	# @param A : string
	# @return an integer
	def solve(self, A):
	    
        stack = []
        d = {"}":"{", ")":"(", ']':'['}
        
        for c in A:
            if c == ')' or c == '}' or c == ']':
                if not stack or stack[-1] != d[c]:
                    return 0
                else:
                    stack.pop()
            elif c =='(' or c == '{' or c == '[':
                stack.append(c)
                    
        return 1 if not stack else 0
_______________________________________________________________________Given_Solution___________________________________________________________
class Solution:
    # @param A : string
    # @return an integer
    def solve(self, A):
        stk = []
        for i in A:
            if i in '[{(':
                stk.append(i)
            else:
                if i == ']':
                    if not stk or stk[-1] != '[':
                        return 0
                    else:
                        stk.pop()
                elif i == '}':
                    if not stk or stk[-1] != '{':
                        return 0
                    else:
                        stk.pop()
                elif i == ')':
                    if not stk or stk[-1] != '(':
                        return 0
                    else:
                        stk.pop()
        if stk:
            return 0
        
        return 1

--Java--
public class Solution {
  public int solve(String A) {

    HashMap < Character, Character > mp = new HashMap < Character, Character > ();
    Stack < Character > st = new Stack < Character > ();
    mp.put(')', '(');
    mp.put('}', '{');
    mp.put(']', '[');
    for (int i = 0; i < A.length(); i++) {
      char c = A.charAt(i);
      if (c == '(' || c == '[' || c == '{') {
        st.push(c);
      } else if (st.empty() || st.peek() != mp.get(c)) {
        return 0;
      } else {
        st.pop();
      }
    }

    if (st.empty()) return 1;

    return 0;
  }
}
_______________________________________________________________________Approach___________________________________________________________
First, let us look at the impossible cases:
1) [() : No corresponding closing bracket for an opening bracket.
2) [) : Incorrect closing bracket for an opening bracked.
3) } : No opening bracked for a closed bracket.

Now, we can observe that the earlier a bracket is encountered in the string, the later it is closed. Using this observation we can guess that the Stack Data Structure will be used.

We traverse the given string from the left. If the i-th character is an opening bracket, we push it on to the stack.
If it is a closing bracket, we check for the impossible case 2 and case 3. If they are being violated, then we can simply return 0, otherwise we can pop the topmost bracket from the stack.
To check for case 1, if at the end of our traversal, our stack is not empty, then we can say that the brackets are not correctly matched.

If all the conditions are fulfilled, then we can return 1.